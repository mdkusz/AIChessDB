<?xml version="1.0"?>
<doc>
  <assembly>
    <name>AIAssistants</name>
  </assembly>
  <members>
    <member name="T:AIAssistants.Data.InteropFunctionDelegate">
      <summary>
            Delegate for interop functions
            </summary>
      <param name="obj">
            Object to process
            </param>
      <returns>
            Resulting object
            </returns>
    </member>
    <member name="T:AIAssistants.Data.AIInteropService">
      <summary>
            Definition of communication service for applications and developer tools interoperability
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ServiceType">
      <summary>
            Service type
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ServiceAddress">
      <summary>
            Service access point definition
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ServicePort">
      <summary>
            Service port number, if any.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ConnectionTimeout">
      <summary>
            Connection timeout in milliseconds
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ExportedServices">
      <summary>
            List of exported service names
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ExportedFunctions">
      <summary>
            List of exported function names
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.ExportedCommands">
      <summary>
            List of exported command menu items
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AIInteropService.InteropFunction">
      <summary>
            Interop function to process client requests
            </summary>
    </member>
    <member name="M:AIAssistants.Data.AIInteropService.SendObjectAsync(System.Object)">
      <summary>
            Send an object to the server
            </summary>
      <param name="obj">
            Object to send
            </param>
    </member>
    <member name="M:AIAssistants.Data.AIInteropService.ReceiveObjectAsync(System.Type)">
      <summary>
            Receive an object from the server
            </summary>
      <param name="objtype">
            Object type
            </param>
    </member>
    <member name="M:AIAssistants.Data.AIInteropService.StartListenerAsync(System.Threading.CancellationToken,System.Type)">
      <summary>
            Start a listener for incoming objects of a given type
            </summary>
      <param name="cancel">
            CancellationToken to cancel the listener
            </param>
      <param name="objecttype">
            Type of objects to receive
            </param>
    </member>
    <member name="M:AIAssistants.Data.AIInteropService.SendReceiveObjectAsync(System.Object,System.Type)">
      <summary>
            Send an object to the server
            </summary>
      <param name="obj">
            Object to send
            </param>
      <param name="resulttype">
            Resulting object type
            </param>
      <returns>
            Object returned from the server
            </returns>
    </member>
    <member name="M:AIAssistants.Data.AIInteropService.WaitForServerAsync">
      <summary>
            Wait until there is a server to connect to
            </summary>
    </member>
    <member name="T:AIAssistants.Data.CommandMenu">
      <summary>
            Definition of a command menu item
            </summary>
    </member>
    <member name="P:AIAssistants.Data.CommandMenu.Menu">
      <summary>
            Menu name (application or assistant)
            </summary>
    </member>
    <member name="P:AIAssistants.Data.CommandMenu.FunctionName">
      <summary>
            Function name to call
            </summary>
    </member>
    <member name="P:AIAssistants.Data.CommandMenu.Caption">
      <summary>
            Menu item caprion
            </summary>
    </member>
    <member name="P:AIAssistants.Data.CommandMenu.Description">
      <summary>
            Menu item description
            </summary>
    </member>
    <member name="P:AIAssistants.Data.CommandMenu.ServiceName">
      <summary>
            Mandatory service name or null
            </summary>
    </member>
    <member name="P:AIAssistants.Data.CommandMenu.ExtensionName">
      <summary>
            Mandatory extension name or null
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ContextMessageSplitter">
      <summary>
            Split a single context message into multiple messages
            </summary>
      <remarks>
            Texts preceeded by @ and a player name are concurrent messages for that player.
            Use a single @ character to separate last concurrent message from the main one.
            The remaining text is the main message.
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ContextMessageSplitter.PlayerNames">
      <summary>
            List of player names
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessageSplitter.ConcurrentMessages">
      <summary>
            List of concurrent messages or null
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessageSplitter.MainMessage">
      <summary>
            Main context message
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ConversationContainer">
      <summary>
            Conversation container. Contains a list of conversations and the players assigned to them
            </summary>
      <remarks>
            This is a platform where many agents can interact with each other. Many assistants can be compatible with others, and many others do not.
            It is possible for all playwers to share the same conversation thread, or to have separate conversations.
            This class guarantees that all players have the same context besides of having separated thread objects.
            There can be, however, the need to maintain separate conversations for different players or teams. This class allows that too.
            Using a conversation container allows serialization and deserialization of the conversation state in a centralized way.
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ConversationContainer.ChildConversationsSerialized">
      <summary>
            List of pre-serialized child conversations 
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationContainer.CreatedAt">
      <summary>
            Creation date and time of the container
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationContainer.Identifier">
      <summary>
            IConversation: Unique identifier of the conversation
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationContainer.StandardMessages">
      <summary>
            IConversation: List of standardized messages in the conversation
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationContainer.ChildConversations">
      <summary>
            IConversationContainer: List of child conversations
            </summary>
      <remarks>
            This platform allows AI agents from different providers, so the specific implementation will be different and incompatible with each other.
            There can be also the need to maintain separate conversations for different players or teams.
            </remarks>
      <seealso cref="P:AIAssistants.Data.ConversationContainer.PlayerConversation" />
    </member>
    <member name="P:AIAssistants.Data.ConversationContainer.PlayerConversation">
      <summary>
            IConversationContainer: Dictionary of player identifiers (Key) and their respective conversation identifier (Value)
            </summary>
      <seealso cref="P:AIAssistants.Data.ConversationContainer.ChildConversations" />
    </member>
    <member name="M:AIAssistants.Data.ConversationContainer.AddConversation(AIAssistants.Interfaces.IConversation,System.String)">
      <summary>
            IConversationContainer: Add or update a conversation to the container and assignt it to a player
            </summary>
      <param name="conversation">
            Conversation to add or update
            </param>
      <param name="playerid">
            Player to assign the conversation to
            </param>
    </member>
    <member name="M:AIAssistants.Data.ConversationContainer.RemovePlayer(System.String)">
      <summary>
            IConversationContainer: Remove player and its conversation from the container
            </summary>
      <param name="playerid">
            Player identifier
            </param>
    </member>
    <member name="M:AIAssistants.Data.ConversationContainer.GetConversation(System.String)">
      <summary>
            IConversationContainer: Get the conversation of a specific player
            </summary>
      <param name="playerid">
            Player unique identifier
            </param>
      <returns>
            Player conversation, if any
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConversationContainer.CreateSerializedList">
      <summary>
            Create the serialized list of child conversations
            </summary>
    </member>
    <member name="M:AIAssistants.Data.ConversationContainer.RebuildConversationList">
      <summary>
            Rebuild the list of child conversations from the serialized list
            </summary>
    </member>
    <member name="M:AIAssistants.Data.ConversationContainer.Serialize(System.Text.Json.JsonSerializerOptions)">
      <summary>
            Serialize this class properly in JSON format
            </summary>
      <param name="options">
            Default options or null
            </param>
      <returns>
            Serialized JSON string
            </returns>
    </member>
    <member name="T:AIAssistants.Data.ConversationItem">
      <summary>
            Object to serialize and deserialize conversation items of arbitrary types
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationItem.Identifier">
      <summary>
            Item identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationItem.ItemType">
      <summary>
            Item type
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConversationItem.SerializedItem">
      <summary>
            Serialized item as string
            </summary>
    </member>
    <member name="M:AIAssistants.Data.ConversationItem.DeserializedItem">
      <summary>
            Convert an item to a conversation item
            </summary>
      <returns>
            ICoversation item
            </returns>
    </member>
    <member name="T:AIAssistants.Data.ConversationContainerJsonConverter">
      <summary>
            Converter for the ConversationContainer class
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ExtensionItem">
      <summary>
            Item to declare service extensions for applications
            </summary>
      <remarks>
            This is the standard item to store the service extensions information for applications as json objects.
            </remarks>
      <seealso cref="!:IAppAutomationExtension" />
      <seealso cref="!:IApplicationService" />
      <seealso cref="!:IAppDependenciProvider" />
      <seealso cref="!:Extensions.json" />
    </member>
    <member name="P:AIAssistants.Data.ExtensionItem.Provider">
      <summary>
            GenericType name for the IAppDependencyProvider implementation
            </summary>
      <remarks>
            Use the full type name, including the assembly information.
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ExtensionItem.Extensions">
      <summary>
            List of extension names to load
            </summary>
      <remarks>
            Although an extension can define multiple services, the application can load only the services it needs.
            Define the services to load in this list.
            </remarks>
    </member>
    <member name="T:AIAssistants.Data.APIUIDataSheet">
      <summary>
            Base class for all API data sheets
            </summary>
      <remarks>
            This is a default implementation of the IAPIUIDataSheet interface to be used with API objects.
            Use this base class for API objects that need to expose properties to be edited in a user interface.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIUIDataSheet" />
      <descendant>PlayerDataSheet</descendant>
      <descendant>GeneralDocumentation</descendant>
      <descendant>AIEntity</descendant>
      <descendant>EntityRelation</descendant>
      <descendant>EntitiesInteraction</descendant>
      <descendant>InteractionStep</descendant>
      <descendant>SolutionConcept</descendant>
      <descendant>ConceptPoint</descendant>
      <descendant>FunctionDef</descendant>
      <descendant>FunctionParameters</descendant>
      <descendant>CastElement</descendant>
      <descendant>PlayPlayer</descendant>
      <descendant>PlayUser</descendant>
      <descendant>PlaySchema</descendant>
      <descendant>ImageRequest</descendant>
      <descendant>ElementConfiguration</descendant>
      <descendant>Assistant</descendant>
      <descendant>ChatRequest</descendant>
      <descendant>Message</descendant>
      <descendant>EmbeddingRequest</descendant>
      <descendant>FineTuningJobRequest</descendant>
      <descendant>SoundRequest</descendant>
      <descendant>WebSearchConfig</descendant>
      <descendant>AzureExtensionConfig</descendant>
      <descendant>DeveloperServicesConfig</descendant>
    </member>
    <member name="P:AIAssistants.Data.APIUIDataSheet.Configuration">
      <summary>
            IUIDataSheet: Interface to the object that manages the configuration
            </summary>
      <remarks>
            The property set can be an object managed for an IAPIElement object. For instance, it can be data for an API request .
            Using this property you can access the object that manages the configuration.
            </remarks>
    </member>
    <member name="M:AIAssistants.Data.APIUIDataSheet.Equals(AIAssistants.Data.APIUIDataSheet)">
      <summary>
            IEquatable interface member
            </summary>
      <param name="other">
            Other instance
            </param>
      <returns>
            True if both instances are the same
            </returns>
    </member>
    <member name="T:AIAssistants.Data.AppPlayer">
      <summary>
            Generic non-AI player
            </summary>
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
      <descendant>UserPlayer</descendant>
      <descendant>ApplicationPlayer</descendant>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.IsUser">
      <summary>
            Flag to differentiate user from applications
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.PlayerName">
      <summary>
            IPlayer: player name
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.PlayerRole">
      <summary>
            IPlayer: player role
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.Reminder">
      <summary>
            IPlayer: Message that will be sent on each request to remind the player important things
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.BackColor">
      <summary>
            IPlayer: bubble header background color
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.ForeColor">
      <summary>
            IPlayer: bubble header foreground color
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.AllowedServices">
      <summary>
            IPlayer: List of allowed application service identifiers
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.PrivateConsole">
      <summary>
            IPlayer: Console to show player messages
            </summary>
    </member>
    <member name="P:AIAssistants.Data.AppPlayer.PlayerSettings">
      <summary>
            IPlayer: Player settings
            </summary>
    </member>
    <member name="T:AIAssistants.Data.UserPlayer">
      <summary>
            Generic user player
            </summary>
      <seealso cref="T:AIAssistants.Data.AppPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
    </member>
    <member name="P:AIAssistants.Data.UserPlayer.IsUser">
      <summary>
            Flag to differentiate user from applications
            </summary>
    </member>
    <member name="P:AIAssistants.Data.UserPlayer.PlayerRole">
      <summary>
            IPlayer: player role
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ApplicationPlayer">
      <summary>
            Generic application player
            </summary>
      <seealso cref="T:AIAssistants.Data.AppPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
    </member>
    <member name="P:AIAssistants.Data.ApplicationPlayer.IsUser">
      <summary>
            Flag to differentiate user from applications
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ApplicationPlayer.PlayerRole">
      <summary>
            IPlayer: player role
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ToolUIType">
      <summary>
            User interface types for tool selection
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ToolUI">
      <summary>
            User interface to allow force tool use in user prompts
            </summary>
      <remarks>
            This class is used with Help Consoles to provide user interface to force tool use in user prompts.
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.Type">
      <summary>
            Interface type for the tool (Check or DropDown orptions)
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.ToolType">
      <summary>
            Tool type
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.UID">
      <summary>
            Tool unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.Icon">
      <summary>
            Icon to show in the tool selector
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.ToolTip">
      <summary>
            Tool tip to show in the tool selector
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.Checked">
      <summary>
            Check status for the tool
            </summary>
      <example>
            File search and Code interpreter in OpenAI APIs are examples of tools that can be checked.
            </example>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.Items">
      <summary>
            List of items for the DropDown options
            </summary>
      <example>
            Function calls in OpenAI APIs are examples of tools that can be selected from a DropDown list as function names.
            </example>
    </member>
    <member name="P:AIAssistants.Data.ToolUI.SelectedItem">
      <summary>
            Items list selected item
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ConsolePlay">
      <summary>
            Generic IPlay implementation
            </summary>
      <example>
            The cfChat and cfPlay forms in the AIAPIWinAdmin project use this class with the APIConsole control to let users test chats and plays.
            </example>
      <remarks>
            IPlay is a data container class to configure IHelpCopnsole objects, which provide the user interface for player interactions.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:GlobalCommonEntities.Interfaces.IStandardObject" />
      <seealso cref="T:GlobalCommonEntities.Interfaces.IUIDataSheet" />
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <see cref="T:AIAssistants.JSON.PlayPlayer" />
      <seealso cref="T:AIAssistants.JSON.CastElement" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIManager" />
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.StdUID">
      <summary>
            IStandardObject: Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.StdName">
      <summary>
            IStandardObject: Element name
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.StdDescription">
      <summary>
            IStandardObject: Element description
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.DataSheet">
      <summary>
            IStandardObject: Information to edit the object
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.Presentation">
      <summary>
            IPlay: This is a presentation message.
            </summary>
      <remarks>
            This mesage will be the first one for all players in the play.
            Its goal is to introuce all players to each other so they know their names, roles, and capabilities.
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.User">
      <summary>
            IPlay: User player configuration
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.Applications">
      <summary>
            IPlay: List of application player configuration
            </summary>
      <remarks>
            Applications can act as users sending messages to AI agents.
            Applications can define custom roles for the players so they can decide to whom sending the messages.
            There is not mandatory to have an application player in the play.
            Responses to application messages should be managed be human users. Applications do not establish conversations with agents, for they aren't intelligent players.
            </remarks>
      <seealso cref="!:GetPlayerByRole(string)" />
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.DefaultPlayer">
      <summary>
            IPlay: This is the default cast player to send prompts to when no specific player is selected.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.AppAutomation">
      <summary>
            IPlay: Application API services
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ConsolePlay.Cast">
      <summary>
            IPlay: Player list
            </summary>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.ContainsPlayer(System.String)">
      <summary>
            IPlay: Check for a player in the cast
            </summary>
      <param name="playerId">
            Player unique identifier
            </param>
      <returns>
            True if the player is in the cast
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetPlayerByID(System.String)">
      <summary>
            IPlay: Find a player in the cast by its unique identifier
            </summary>
      <param name="playerId">
            Player unique identifier
            </param>
      <returns>
            Found player or null
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetPlayerByRole(System.String,System.Boolean)">
      <summary>
            IPlay: Find players in the cast by its application role
            </summary>
      <param name="approle">
            Application role identifier
            </param>
      <param name="notbusy">
            Exclude busy players from the search
            </param>
      <returns>
            Found players or null
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetPlayerByName(System.String)">
      <summary>
            IPlay: Find a player in the cast by its name
            </summary>
      <param name="playerName">
            Player name
            </param>
      <returns>
            Found player or null
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetAppByName(System.String)">
      <summary>
            IPlay: Find an application by its name
            </summary>
      <param name="appName">
            Application name
            </param>
      <returns>
            Found application or null
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.UserPlayerByName(System.String)">
      <summary>
            IPlay: Find an application or user by its name
            </summary>
      <param name="appName">
            Application or user name
            </param>
      <returns>
            Found application, user, or null
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetPlayerSchema(AIAssistants.Interfaces.IAPIPlayer)">
      <summary>
            IPlay: Get the play schema for a given IAPIPlayer object
            </summary>
      <param name="player">
            Player to get the schema from
            </param>
      <returns>
            PlayPlayer object to serialize the player
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetPlayerFromSchema(AIAssistants.JSON.PlayPlayer,AIAssistants.Interfaces.IAPIManager)">
      <summary>
            Make an IAPIPlayer object from a PlayPlayer schema object
            </summary>
      <param name="pp">
            PlayPlayer object to create the player from
            </param>
      <returns>
            IAPIPlayer object created from the schema or null
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.GetCastElement(AIAssistants.Interfaces.IPlayerAsset)">
      <summary>
            IPlay: Get the asset schema for a given IPlayerAsset object
            </summary>
      <param name="asset">
            Asset to get the schema from
            </param>
      <returns>
            CastElement object to serialize the asset
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.LoadFromStream(System.IO.Stream)">
      <summary>
            IPlay: Create Play from a stream
            </summary>
      <param name="splay">
            Stream with the Play configuration
            </param>
    </member>
    <member name="M:AIAssistants.Data.ConsolePlay.LoadFromSchema(AIAssistants.JSON.PlaySchema)">
      <summary>
            IPlay: Create Play from a schema object
            </summary>
      <param name="play">
            Object with the Play configuration
            </param>
    </member>
    <member name="T:AIAssistants.Data.AttachmentType">
      <summary>
            Attachment types for context messages
            </summary>
    </member>
    <member name="T:AIAssistants.Data.ContextMessage">
      <summary>
            Context message container. Give context to assistants without need of responses
            </summary>
      <remarks>
            This is a platform independent message container.
            It can containt text, links, or binary data to give context to the assistants and other players.
            This platform facilitates the interaction between players.
            Players can be human or AI, and can be part of the same or different teams.
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.PlatformMessageId">
      <summary>
            Specific platform message identifier to match with this standard message
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ConversationId">
      <summary>
            Unique identifier of the IConversation this message belongs to
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.UserId">
      <summary>
            User identifier in multi-user applications.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.Private">
      <summary>
            This message should not be shown in the chat console
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ReturnToSender">
      <summary>
            Reinject this message inmediately as a new prompt
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.CreatedAt">
      <summary>
            Message creation date and time
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.FormattedCreatedAt">
      <summary>
            Helper to facilitate reading date and time creation in log files
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.PlayerName">
      <summary>
            Name of the player that generated the message
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ListenerName">
      <summary>
            Name of the listener player
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ListenerModel">
      <summary>
            Force listener to use a specific model
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ListenerTemperature">
      <summary>
            What sampling temperature to use, between 0 and 2. Optional.
            Higher values make the output more random, lower values make it more deterministic. Defaults to 1.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ListenerTopP">
      <summary>
            An alternative to sampling with temperature, called nucleus sampling. Optional.
            Model considers the results of tokens with top_p probability mass. Defaults to 1.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.RespondToName">
      <summary>
            Player name to respond to
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.PlayerRole">
      <summary>
            Role of the player that generated the message.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.Message">
      <summary>
            Message text
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.PlaceholdersReplacements">
      <summary>
            List of value names to replace in the message text. Used in massive automation processes to re-utilize a message.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ChatMessage">
      <summary>
            Version of the messge to show in the chat console
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.AttachmentType">
      <summary>
            GenericType of url or data attachment
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.MessageUrl">
      <summary>
            Url for message attachment
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.Data">
      <summary>
            Binary data like sound or images for players
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.FileId">
      <summary>
            Attached file unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.FilePath">
      <summary>
            Attached file path
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ObjectData">
      <summary>
            JSON object serialized as string
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ObjectType">
      <summary>
            Type of the JSON object
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.AppExtraData">
      <summary>
            JSON object with custom application extra data serialized as string
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.AppExtraType">
      <summary>
            Type of the custom application extra data JSON object
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ForceTool">
      <summary>
            Force the player to use a specific tool
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ToolName">
      <summary>
            Name of the tool if needed
            </summary>
      <remarks>
            Use this field, along with ForceTool = ToolTypes.FunctionCall, to force a given function call by its name
            </remarks>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ToolResult">
      <summary>
            When this is generated by a tool or function call, this is the result returned by the tool.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ContinueWith">
      <summary>
            Function name to call to continue with the next step of a multi-step process
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ContinueParameters">
      <summary>
            Function parameters to continue with the next step of a multi-step process
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.Reminder">
      <summary>
            Add a reminder to the message to the assistant
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.PrivateInstructions">
      <summary>
            Instructions for the current assistant not published in the shared context
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.RemoveWhenDone">
      <summary>
            When true, the message will be removed from the context when the assistant finishes processing it.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.ConnectionNumber">
      <summary>
            Index of the database connection to use for this message
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.JsonSchema">
      <summary>
            Define a JSON schema for the message response.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.ContextMessage.AppData">
      <summary>
            Application dependant extra data to be used in function calls.
            </summary>
    </member>
    <member name="M:AIAssistants.Data.ContextMessage.Copy(System.String)">
      <summary>
            Get a copy of the message with a reminder text
            </summary>
      <param name="reminder">
            Reminder text
            </param>
      <returns>
            Message copy with reminder
            </returns>
    </member>
    <member name="T:AIAssistants.Data.ExcelDataReader">
      <summary>
            Data integration from Excel files
            </summary>
      <remarks>
            Some Json structures are difficult to write by hand, like jsonl message files for model tuning.
            This class helps to create a template file for a given column set, and read the data from the file.
            The consumer of this class must provide a column set to create the template, and process the data.
            The consumer must know how to process the data, and how to use the column set.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IIntegrationDataReader" />
      <seealso cref="T:AIAssistants.Data.IntegrationColumnSet" />
    </member>
    <member name="M:AIAssistants.Data.ExcelDataReader.CreateDataTemplateFile(AIAssistants.Data.IntegrationColumnSet)">
      <summary>
            IIntegrationDataReader: Create a data template file for a given column set
            </summary>
      <param name="columns">
            Columns set
            </param>
      <returns>
            Template file name
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ExcelDataReader.ReadDataSheet(System.String)">
      <summary>
            IIntegrationDataReader: Read a data sheet from a file
            </summary>
      <param name="filename">
            Data file name. Null to open a file dialog
            </param>
      <returns>
            Data table with the data
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ExcelDataReader.ReadDataSheet(System.IO.Stream)">
      <summary>
            IIntegrationDataReader: Read a data sheet from a stream
            </summary>
      <param name="stream">
            Stream with the data
            </param>
      <returns>
            Data table with the data
            </returns>
    </member>
    <member name="M:AIAssistants.Data.ExcelDataReader.WriteDataTemplateStream(AIAssistants.Data.IntegrationColumnSet,System.IO.Stream)">
      <summary>
            IIntegrationDataReader: Write a data template in a stream for a given column set
            </summary>
      <param name="columns">
            Columns set
            </param>
      <param name="stream">
            Stream to write the template
            </param>
    </member>
    <member name="T:AIAssistants.Data.IntegrationDataColumn">
      <summary>
            Integration data column definition
            </summary>
      <remarks>
            Integration columns are and used to create a template file for massive data integration.
            Integration column definition can be serialized in Json format.
            </remarks>
      <seealso cref="!:IIntegrationDataReader" />
      <seealso cref="!:IDataIntegration" />
    </member>
    <member name="T:AIAssistants.Data.IntegrationColumnSet">
      <summary>
            Integration data column set
            </summary>
    </member>
    <member name="P:AIAssistants.Data.IntegrationColumnSet.Name">
      <summary>
            Column set name
            </summary>
    </member>
    <member name="P:AIAssistants.Data.IntegrationColumnSet.Columns">
      <summary>
            Column set columns
            </summary>
    </member>
    <member name="T:AIAssistants.Data.PlayerDataSheet">
      <summary>
            Data sheet for modifying player settings inthe user interface.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.PlayerDataSheet.Properties">
      <summary>
            Property editor information for the player data sheet members.
            </summary>
    </member>
    <member name="P:AIAssistants.Data.PlayerDataSheet.Name">
      <summary>
            Player name
            </summary>
    </member>
    <member name="P:AIAssistants.Data.PlayerDataSheet.BackColor">
      <summary>
            Player bubble header background color
            </summary>
    </member>
    <member name="P:AIAssistants.Data.PlayerDataSheet.ForeColor">
      <summary>
            Player bubble header text color
            </summary>
    </member>
    <member name="P:AIAssistants.Data.PlayerDataSheet.Voice">
      <summary>
            Player voice name to speech in conversations
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IConversation">
      <summary>
            Abstraction of a conversation where an undefined number of players interact with each other
            </summary>
      <example>
            The class ThreadWithRuns in the OpenAIAPI project is an example of class implementing IConversation.
            </example>
      <descendant>IConversationContainer</descendant>
    </member>
    <member name="P:AIAssistants.Interfaces.IConversation.Identifier">
      <summary>
            Unique identifier of the conversation
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IConversation.StandardMessages">
      <summary>
            List of standardized messages in the conversation
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IConversationContainer">
      <summary>
            Conversation container for all the current conversations in a play
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IConversationContainer.CreatedAt">
      <summary>
            Creation date and time of the container
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IConversationContainer.ChildConversations">
      <summary>
            List of child conversations
            </summary>
      <remarks>
            This platform allows AI agents from different providers, so the specific implementation will be different and incompatible with each other.
            There can be also the need to maintain separate conversations for different players or teams.
            </remarks>
      <seealso cref="P:AIAssistants.Interfaces.IConversationContainer.PlayerConversation" />
    </member>
    <member name="P:AIAssistants.Interfaces.IConversationContainer.PlayerConversation">
      <summary>
            Dictionary of player identifiers (Key) and their respective conversation identifier (Value)
            </summary>
      <seealso cref="P:AIAssistants.Interfaces.IConversationContainer.ChildConversations" />
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationContainer.GetConversation(System.String)">
      <summary>
            Get the conversation of a specific player
            </summary>
      <param name="playerid">
            Player unique identifier
            </param>
      <returns>
            Player conversation, if any
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationContainer.AddConversation(AIAssistants.Interfaces.IConversation,System.String)">
      <summary>
            Add or update a conversation to the container and assignt it to a player
            </summary>
      <param name="conversation">
            Conversation to add or update
            </param>
      <param name="playerid">
            Player to assign the conversation to
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationContainer.RemovePlayer(System.String)">
      <summary>
            Remove player and its conversation from the container
            </summary>
      <param name="playerid">
            Player identifier
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IConversationalPlayer">
      <summary>
            Interface for players that can maintain the state of a conversation
            </summary>
      <descendant>IAssistant</descendant>
    </member>
    <member name="P:AIAssistants.Interfaces.IConversationalPlayer.CurrentThread">
      <summary>
            Current thread
            </summary>
      <remarks>
            A thread is a message list with the conversation history.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationalPlayer.JoinConversation(AIAssistants.Interfaces.IConversationContainer)">
      <summary>
            Join a global conversation
            </summary>
      <param name="container">
            Conversation container
            </param>
      <remarks>
            Find a compatible conversation in the container and join it, or create a new one.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationalPlayer.GetThreadList">
      <summary>
            Get the list of stored threads
            </summary>
      <returns>
            Thread list as generic objects
            </returns>
      <remarks>
            Retrieve a list of historical threads from the provider database or application mnanaged data files.
            The list will contain just the thread identifiers and some basic identificative data. Use the RetrieveThread method to get the full thread object.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationalPlayer.CreateThread(System.Collections.Generic.List{AIAssistants.Data.ContextMessage})">
      <summary>
            Create new thread
            </summary>
      <param name="prompt">
            List of the first messages to the assistant
            </param>
      <returns>
            Wrapped Thread Object
            </returns>
      <remarks>
            Use this method to begin a new conversation with the assistant.
            You can provide a list of context messages.
            </remarks>
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationalPlayer.RetrieveThread(System.String)">
      <summary>
            Retrieve a thread from its identifier
            </summary>
      <param name="id">
            Thread identifier
            </param>
      <returns>
            Generic object containing the thread object
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IConversationalPlayer.SendPrompt(AIAssistants.Interfaces.IPlayer,System.Collections.Generic.List{AIAssistants.Data.ContextMessage},AIAssistants.Interfaces.IConversation)">
      <summary>
            Send a message to the assistant
            </summary>
      <param name="from">
            Player sending the message
            </param>
      <param name="prompt">
            Message text
            </param>
      <param name="thread">
            Thread to prompt
            </param>
      <returns>
            Message response
            </returns>
      <remarks>
            Use this method to send a message to the assistant using a specific thread.
            The generic IAPIPlayer.SenPrompt version uses the CurrentThread property to send the message.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIPlayer.SendPrompt(AIAssistants.Interfaces.IPlayer,System.Collections.Generic.List{AIAssistants.Data.ContextMessage},System.Boolean)" />
    </member>
    <member name="T:AIAssistants.Interfaces.IMessagesConsole">
      <summary>
            Interface to implement consoles to show player messages
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IMessagesConsole.Play">
      <summary>
            Current play configuration
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IMessagesConsole.CancelTokenSource">
      <summary>
            Allow cancellation for independent tasks
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IMessagesConsole.AddMessage(AIAssistants.Data.ContextMessage)">
      <summary>
            Add a single message to the console
            </summary>
      <param name="message">
            Standard message to show
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IMessagesConsole.AddMessages(System.Collections.Generic.List{AIAssistants.Data.ContextMessage})">
      <summary>
            Add a list of messages to the console
            </summary>
      <param name="messages">
            List of standard messages to show
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IConsoleExtension">
      <summary>
            Interface to implement extension pages for the console
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IConsoleExtension.CurrentContent">
      <summary>
            Page content in the form of a list of messages
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.ISchemaBlockConverter`2">
      <summary>
            Interface to implement converters to integrate a list of files with a given format into a single file, with some format transformations.
            </summary>
      <typeparam name="T">
            Type of the class representing the format of the files to integrate.
            </typeparam>
      <typeparam name="S">
            Type of the class representing the format of the resulting file.
            </typeparam>
    </member>
    <member name="M:AIAssistants.Interfaces.ISchemaBlockConverter`2.CovertToStchemaBlock(System.String,System.Collections.Generic.List{System.String})">
      <summary>
            Converts a list of files with a given format into a single file with a different format.
            </summary>
      <param name="filename">
            Resulting file name.
            </param>
      <param name="items">
            List of files to integrate. All of them must have a format matching with T.
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IStorableElement">
      <summary>
            Interface to implement capabilities to store and retrieve elements from an external dtabase, like the provider cloud.
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IStorableElement.GetStoredElements(System.Object[])">
      <summary>
            List of all available stored elements
            </summary>
      <param name="args">
            Arguments to filter the list of elements if applicable.
            </param>
      <remarks>
            Each ObjectWrapper in the list contains the configuration of an element.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IStorableElement.CreateFromID(System.String)">
      <summary>
            Get an element from its identifier
            </summary>
      <param name="id">
            Element unique identifier
            </param>
      <returns>
            Object with the specific configuration of the element
            </returns>
      <remarks>
            ObjectWrapper objects have a UID property that contains the unique identifier of the object.
            Use the UID property of the objects in the list reurned from the GetStoredElements method to provide the parameter for this method.
            </remarks>
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
    </member>
    <member name="M:AIAssistants.Interfaces.IStorableElement.CreateStorableElement(GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Create a new storable element from a generic object
            </summary>
      <param name="request">
            Generic object wrapping the element creation request
            </param>
      <returns>
            Object with the specific configuration of the element
            </returns>
      <remarks>
            This method uses a request object to create the element in the provider cloud.
            Users don't know the structure of the request object.
            The UIDataSheet in the EditorInfo and ConfigInfo of the IAPIElement interface allow users configure this data structure without having knowledge of it.
            UIDataSheet exposes the properties of the data structure in a generic format. This configuration is provided by the provider API library, and an be different for each provider.
            </remarks>
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
    </member>
    <member name="M:AIAssistants.Interfaces.IStorableElement.DeleteStorableElement">
      <summary>
            Remove a storable element
            </summary>
      <returns>
            True if the element was removed
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IStorableElement.ModifyStoredElement">
      <summary>
            Modify stored element
            </summary>
      <returns>
            Modified stored element
            </returns>
      <remarks>
            The element data structure is managed internally by the element object, so there is no need to provide parameters.
            Modifications in the configuration must be done through the ConfigInfo and EditorInfo properties of the IAPIElement interface.
            </remarks>
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
    </member>
    <member name="T:AIAssistants.Interfaces.IAPIUIDataSheet">
      <summary>
            Interface for all data sheets
            </summary>
      <remarks>
            Use this interface for objects that need to expose properties to be edited in a user interface in a standardized way.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIUIDataSheet.Configuration">
      <summary>
            Interface to the object that manages the configuration
            </summary>
      <remarks>
            The property set can be an object managed for an IAPIElement object. For instance, it can be data for an API request .
            Using this property you can access the object that manages the configuration.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.ITaskAgent">
      <summary>
            Agent that can be instructed to perform tasks.
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.ITaskAgent.AvailableRoles">
      <summary>
            List of all available roles to prompt the agent
            </summary>
      <remarks>
            List of available roles that can be used in prompt messages for the agent.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.ITaskAgent.Instructions">
      <summary>
            The system instructions that the agent uses.
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.ITaskAgent.ChangeInstructions(System.String)">
      <summary>
            Set the system instructions for the agent.
            </summary>
      <param name="instructions">
            New instructions for the agent.
            </param>
      <returns>
            True if the instructions were changed successfully, false otherwise.
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IUIElementCollector">
      <summary>
            Interface for collecting UI elements for AI Assistants to interact with
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IUIElementCollector.CollectUIElements(System.Object,System.String,AIAssistants.Interfaces.IAppAutomation)">
      <summary>
            Recursively collects UI elements from a root UI element
            </summary>
      <param name="root">
            root UI element
            </param>
      <param name="pname">
            Parent name
            </param>
      <param name="app">
            Application to check whether process an assembly.
            </param>
      <returns>
            List of UI elements
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IUserPrompt">
      <summary>
            Interface for objects that can be used as user prompts
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IUserPrompt.User">
      <summary>
            Current user settings
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IUserPrompt.Model">
      <summary>
            Currently selected model
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IUserPrompt.Tools">
      <summary>
            Create buttons to show tools to force in the prompt
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IUserPrompt.Prompt">
      <summary>
            Editor text
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IUserPrompt.Enabled">
      <summary>
            Enable or disable user prompt UI
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IUserPrompt.Clear">
      <summary>
            Clear editor text
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IUserPrompt.ResetTools(AIAssistants.Interfaces.ToolTypes)">
      <summary>
            Free all forced tool options
            </summary>
      <param name="types">
            Tool types to reset
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IUserPrompt.SetFocus">
      <summary>
            Set input focus to the editor
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IUserPrompt.SendUserPrompt">
      <summary>
            Execute prompt handler
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.SendPromptHandlerAsync">
      <summary>
            Send prompt delegate
            </summary>
      <param name="prompt">
            User prompt in the form of ContextMessage
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IAppDependencyProvider">
      <summary>
            Interface for App Dependency Provider
            </summary>
      <remarks>
            Use this intreface for classes that provide dependencies for the application.
            </remarks>
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAppDependencyProvider.ConfigurationPath">
      <summary>
            Application configuration files path
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppDependencyProvider.GetDependencyTypeNames">
      <summary>
            Get the list of dependency type names
            </summary>
      <returns>
            Dependency type names list
            </returns>
      <remarks>
            The names of the types are used to get the dependencies of a specified type.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppDependencyProvider.GetDependecies(System.String)">
      <summary>
            Get the list of dependencies for a specified type
            </summary>
      <param name="typename">
            Specific type name. Use null to get all dependencies.
            </param>
      <returns>
            List of dependencies wrapped in ObjectWrapper objects
            </returns>
      <remarks>
            Using ObjectWrapper as return type provides a way to manage all objects in a generic way.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IDocumentAnalyzer">
      <summary>
            Interface for AI agents that can read, understand and analyze documents to answer requests
            </summary>
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="T:AIAssistants.Interfaces.IDocumentStoreManager" />
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentAnalyzer.GetDocumentStoreManager">
      <summary>
            Provide a IDocumentStoreManager to manage documents
            </summary>
      <returns>
            IDocumentStoreManager object or null if not available
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentAnalyzer.AnalyzeDocument(AIAssistants.Interfaces.IPlayer,System.String,AIAssistants.Data.ContextMessage)">
      <summary>
            Analyze a document and return a context message with the results
            </summary>
      <param name="from">
            Player that sends the request
            </param>
      <param name="instructions">
            Agent general instructions to proceed
            </param>
      <param name="prompt">
            Prompt with the request to answer
            </param>
      <returns>
            Response message with the answer found
            </returns>
      <remarks>
            Use this method to force a file search tool to analyze a document and return the results.
            Use the document store manager to store the documents before calling this method, if needed.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentAnalyzer.ProcessDocument(AIAssistants.Interfaces.IPlayer,System.String,AIAssistants.Data.ContextMessage,System.String)">
      <summary>
            Process a document and return a context message with the results
            </summary>
      <param name="from">
            Player that sends the request
            </param>
      <param name="instructions">
            Agent general instructions to proceed
            </param>
      <param name="prompt">
            Prompt with the request to answer
            </param>
      <param name="documentID">
            Document id in the application repository to upload to the cloud
            </param>
      <returns>
            Response message with the answer and document generated attachments
            </returns>
      <remarks>
            Use this method to force a code interpreter tool to analyze a document and possibly generate a new document with the results.
            Use the document store manager to store the documents before calling this method, if needed.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IDocumentStoreManager">
      <summary>
            Standardized interface for managing document stores
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IDocumentStoreManager.StoreIdentifier">
      <summary>
            Document store identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IDocumentStoreManager.MaxDocumentSize">
      <summary>
            Maximum allowed document size in bytes
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IDocumentStoreManager.FileManager">
      <summary>
            File Manager
            </summary>
      <remarks>
            This object is needed because the files stored in a Vector Store are just the identifiers of files stored in the file manager.
            Only OpenAI file managers are allowed.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.AllowedFileExtensions(AIAssistants.Interfaces.ToolTypes)">
      <summary>
            List of allowed file extensions
            </summary>
      <param name="tool">
            Tool type
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.MimeTypeForExtension(System.String,AIAssistants.Interfaces.FileFormat@)">
      <summary>
            Get the MIME type for a file extension
            </summary>
      <param name="extension">
            File extension
            </param>
      <param name="format">
            File format output parameter
            </param>
      <returns>
            Mime type or null if extension is not allowed
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.ExistsDocument(System.String)">
      <summary>
            Check if a document exists in the store repository
            </summary>
      <param name="documentID">
            Document identifier in the local repository
            </param>
      <returns>
            true if the document exists, false otherwise
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.GetTextDocumentContent(System.String)">
      <summary>
            Get the content of a text document in the store repository
            </summary>
      <param name="documentName">
            Document name
            </param>
      <returns>
            Document text content
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.StoreDocument(System.String,System.Boolean,System.String,AIAssistants.Interfaces.ToolTypes)">
      <summary>
            Strore a document from the application repository
            </summary>
      <param name="documentID">
            Document id in the application repository
            </param>
      <param name="delpkg">
            Remove only from package
            </param>
      <param name="documentBlock">
            Document block id in the store repository. Null if the document is not part of a block
            </param>
      <param name="tool">
            Tool type for which the document is stored
            </param>
      <returns>
            Document id in the store repository
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.StoreFromFileManager(System.String)">
      <summary>
            Strore a document from the file manager repository
            </summary>
      <param name="documentID">
            Document id in file manager repository
            </param>
      <returns>
            Document id in the store repository
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.StoreFile(System.String,System.Boolean,System.String,AIAssistants.Interfaces.ToolTypes)">
      <summary>
            Strore a document from a file
            </summary>
      <param name="path">
            Document path
            </param>
      <param name="delpkg">
            Remove only from package
            </param>
      <param name="documentBlock">
            Document block id in the store repository. Null if the document is not part of a block
            </param>
      <param name="tool">
            Tool type for which the document is stored
            </param>
      <returns>
            Document id in the store repository
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.RemoveDocument(System.String,System.Boolean)">
      <summary>
            Remove a document from the store repository
            </summary>
      <param name="documentID">
            Document id in the store repository
            </param>
      <param name="delpkg">
            Remove only from package
            </param>
      <returns>
            True if success, false otherwise
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDocumentStoreManager.RemoveDocumentBlock(System.String,System.Boolean)">
      <summary>
            Remove all documents in a block from the store repository
            </summary>
      <param name="documentBlock">
            Document block id in the store repository
            </param>
      <param name="delpkg">
            Remove only from package
            </param>
      <returns>
            True if success, false otherwise
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.ElementCapabilities">
      <summary>
            Element capabilities
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IAPIElement">
      <summary>
            Basic API element
            </summary>
      <example>
            IFileManager, IFilePackageManager and ITuningJob are examples of interfaces extending just this interface. Classes implementing those interfaces are considered tools in this solution.
            IAPIPlayer extends a second level of interface complexity over this one, but there are no final classes implementing just the IAPIPlayer interface.
            IAPIManager extends this interface. Classes implementing this interface manage configuration files and create all other AI objects and tools.
            </example>
      <remarks>
            This is the basic configuration for all AI elements.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIManager" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IFileManager" />
      <seealso cref="T:AIAssistants.Interfaces.IFilePackageManager" />
      <seealso cref="T:AIAssistants.Interfaces.ITuningJob" />
      <seealso cref="T:AIAssistants.Interfaces.IEmbedding" />
      <seealso cref="T:AIAssistants.Interfaces.ElementCapabilities" />
      <descendant>IReconfigurableAPIElement</descendant>
      <descendant>IAPIManager</descendant>
      <descendant>IModelUser</descendant>
      <descendant>IPlayerAsset</descendant>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.Identifier">
      <summary>
            Unique identifier
            </summary>
      <remarks>
            All objects must have unique identifiers. This help to get objects from configuration files and provides an easy way to implement IEquatable.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.Name">
      <summary>
            Element name
            </summary>
      <remarks>
            The element name helps users to identify the object in the configuration.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.Description">
      <summary>
            Element description
            </summary>
      <remarks>
            The desciption provides a brief explanation of the object purpose. It can be used in tooltips and help messages.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.GenericType">
      <summary>
            Element generic type
            </summary>
      <remarks>
            This is the most representative generic interface of the object. It can be used to filter objects in the configuration.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.Capabilities">
      <summary>
            Element capabilities
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.APIManager">
      <summary>
            API manager object
            </summary>
      <remarks>
            API elements are created by a given API manager. Each AI provider has its own API manager.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.EditorInfo">
      <summary>
            Information to edit the object
            </summary>
      <remarks>
            Definition of the custom properties that can be edited in the object. This is used to create the object editor.
            Those properties can be stored in a sepearted configuration file, or in the provider databse.
            </remarks>
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.ConfigInfo">
      <summary>
            Information to edit the object configuration
            </summary>
      <remarks>
            This defines the common configuration properties for this object.
            Each AI provider defines its own configuration properties.
            </remarks>
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIElement.Usage">
      <summary>
            Usage information of this element after the current request.
            </summary>
      <remarks>
            This is a dictionary with information useful to billing and limits.
            Each dictionary key is the name of anusage element field, such as input tokens, audio tokens, etc.
            Keys can be names of composite properties, such as "input_token_details.text_tokens".
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)">
      <summary>
            Query for function extra arguments
            </summary>
      <param name="functionName">
            Name of the function
            </param>
      <returns>
            List of extra arguments
            </returns>
      <remarks>
            Some standard API calls require extra url arguments. This method is used to query the extra arguments needed for a given function.
            The caller of the methods with arguments, should query first this method to provide or ask user for the required arguments.
            Usually, you can call those methods without arguments too, ant they will use default values for them.
            </remarks>
      <seealso cref="T:GlobalCommonEntities.API.ExtraArgs" />
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIElement.UpdateConfiguration(AIAssistants.Interfaces.IAPIElement)">
      <summary>
            Update the element configuration
            </summary>
      <param name="fromElement">
            IAPIElement that needs to update the configuration
            </param>
      <remarks>
            Use this method to force an update of the element configuration. This is useful when the element configuration is changed anywhere.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIElement.UpdateObject(GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Update the element properties (exposed in the EditorInfo property)  in the provider server
            </summary>
      <param name="odata">
            Custom object information contained in an ObjectWrapper object
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IReconfigurableAPIElement">
      <summary>
            Interface to allow updates of the element configuration 
            </summary>
      <remarks>
            This is an extension of the IAPIElement interface to allow change the element properties configuration.
            </remarks>
      <example>
            An example of class implementing this interface is the FunctionDef class in the OpenAIAPI library.
            FunctionDef is the class used to define function call tools for assistant and chat objects.
            </example>
    </member>
    <member name="M:AIAssistants.Interfaces.IReconfigurableAPIElement.SetConfig(GlobalCommonEntities.Interfaces.IUIDataSheet)">
      <summary>
            Set a new element configuration
            </summary>
      <param name="config">
            New configurarion data sheet
            </param>
      <remarks>
            This is intended to affect the ConfigInfo element property.
            </remarks>
      <seealso cref="P:AIAssistants.Interfaces.IAPIElement.ConfigInfo" />
    </member>
    <member name="T:AIAssistants.Interfaces.ImageAttachmentType">
      <summary>
            Enumeration to classify message attachments
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.ToolTypes">
      <summary>
            Generic tools available for the player
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IAPIPlayer">
      <summary>
            Conversational AI player interface
            </summary>
      <example>
            IAssistant, IChat and IImageGenerator interfaces extend this interface.
            </example>
      <remarks>
            IAPIPlayers are AI participants that can interact with users and other AI players.
            IAPIPlayers perform API calls through its IAPIManager creator object.
            The data structures they manage can be different depending on the provider, so they must be wrapped in ObjectWrapper objects.
            As a good practice, those data structures have to be managed only by the owner object. Consumers must be built without need of knowing them.
            IAPIPlayer is a generic interface. Final classes implement derived interfaces like IAssistant, IChat or IImageGenerator.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IModelUser" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIManager" />
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <seealso cref="T:AIAssistants.Interfaces.IHelpConsole" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
      <seealso cref="T:AIAssistants.Interfaces.IApplicationService" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.SystemInstructions">
      <summary>
            Main instructions for the player
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.Tools">
      <summary>
            Tools available for the player
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.ParallelTools">
      <summary>
            Allow parallel use of tools. This is mainly for function or MCP calls.
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.UserFunctions">
      <summary>
            List of functions available for user calling too
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.AllFunctions">
      <summary>
            List of all functions available for this player
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.Voice">
      <summary>
            Player voice name
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.Busy">
      <summary>
            Player availability
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.Assets">
      <summary>
            Asset list
            </summary>
      <example>
            An example of PlayerAsset is the ISpeechManger interface that provides speech capabilities to the player.
            </example>
      <remarks>
            Player assests are tools and resources that the player can use to interact with the user.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
      <seealso cref="T:AIAssistants.Interfaces.ISpeechManager" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.AppRoles">
      <summary>
            List of application specific roles
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.ImageFilter">
      <summary>
            Provides a proper file filter to select images
            </summary>
      <remarks>
            File formats can be restricted by the AI provider.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.ImgFormat">
      <summary>
            Format of the image attachment for messages to player
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIPlayer.CurrentRequest">
      <summary>
            Current request the player is processing
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.ToolName(AIAssistants.Interfaces.ToolTypes,System.String@)">
      <summary>
            Get the tool name amd description for a given type
            </summary>
      <param name="tool">
            Tool type
            </param>
      <param name="description">
            Tool description as out parameter
            </param>
      <returns>
            Tool name
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.AddContext(System.Collections.Generic.List{AIAssistants.Data.ContextMessage})">
      <summary>
            Add context to the player
            </summary>
      <param name="messages">
            List of context messages. Null to reset the context
            </param>
      <remarks>
            Players can store lists of context messages to improve the conversation with the user.
            Context messages can be saved to continue the conversation in future sessions.
            Context messages can be shared by multiple players, so all of them know the conversation points without need to have participated yet.
            </remarks>
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.AddServices(System.Collections.Generic.List{AIAssistants.Interfaces.IApplicationService})">
      <summary>
            Add application services to the player to use in the conversation
            </summary>
      <param name="services">
            List of available services. Null to reset the services
            </param>
      <remarks>
            The application services provide function calls for the player to interact with the current application.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.AddFunctions(System.Collections.Generic.List{AIAssistants.JSON.FunctionDef})">
      <summary>
            Add functions to the player
            </summary>
      <example>
            You can add very simple and generic functions as for instance to get the currente date and time.
            </example>
      <param name="functions">
            List of function definition objects
            </param>
      <remarks>
            Use this method to add simple functions not organized as a service.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.RemoveServices(System.Collections.Generic.List{AIAssistants.Interfaces.IApplicationService})">
      <summary>
            Remove application services to the player
            </summary>
      <param name="services">
            List of services to remove.
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.RemoveFunctions(System.Collections.Generic.List{AIAssistants.JSON.FunctionDef})">
      <summary>
            Remove functions from the player
            </summary>
      <param name="functions">
            List of function definition objects to remove
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.GetExtensionFor(System.String)">
      <summary>
            Get the extension to call a set of functions
            </summary>
      <param name="interfaceName">
            Standardized interface name
            </param>
      <returns>
            Extension to call the function or null if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIPlayer.SendPrompt(AIAssistants.Interfaces.IPlayer,System.Collections.Generic.List{AIAssistants.Data.ContextMessage},System.Boolean)">
      <summary>
            Send a message to the player
            </summary>
      <param name="from">
            Player sending the message
            </param>
      <param name="prompt">
            Messages to send as prompt
            </param>
      <param name="reset">
            Reset conversation before process the request
            </param>
      <returns>
            List of response messages
            </returns>
      <remarks>
            This is a standard prompt method for all AI players.
            Specialized players can provide additional methods to provide interactions and responses.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.GenericRole">
      <summary>
            List of generic roles for AI elements
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IAPIManager">
      <summary>
            Interface to interact with the AI API
            </summary>
      <example>
            OpenAIAPIManager, in the OpenAIAPI library in this solution is an example of final impelmentation of this interface.
            </example>
      <remarks>
            The API manager is the object responsible for calling the AI API and managing the configuration of the AI elements.
            IAPIManager classes can be singletons.
            The preferred format for the configuration files is JSON.
            </remarks>
      <see cref="T:AIAssistants.Interfaces.SingletonInstanceAttribute" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.AccountId">
      <summary>
            Account key identifier for the API calls
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.AppAutomation">
      <summary>
            Access object to application services
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.ConfigurationFileName">
      <summary>
            Get and Set the name for the configuration file
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.ConfigurationPath">
      <summary>
            Get and Set the directory path for the configuration files
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.LogPath">
      <summary>
            Get and Set the directory path for the log files
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.UsageData">
      <summary>
            Activate or deactivate usage data collection
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.LLMModels">
      <summary>
            LLM model list as string. Call AvailableLLMModels to refresh it.
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.GetPlatformRole(AIAssistants.Interfaces.GenericRole,AIAssistants.Interfaces.IModelUser)">
      <summary>
            Provide the proper role name for this AI platform
            </summary>
      <param name="role">
            Generic role
            </param>
      <param name="roleformodel">
            The model user for which the role should be resolved.
            </param>
      <returns>
            Role name as used in this API platform 
            </returns>
      <example>
            When an AI agent talks to other AI agent from a different API platform, the role names must be translated for the listener to undestand the speaker role.
            </example>
      <remarks>
            Role names can differ between AI platforms. This method provides a way to get the proper role name for the current platform.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.GetStandardizedElementType(System.String)">
      <summary>
            Get the standardized element type for a given element of custom type
            </summary>
      <param name="elementType">
            Element type to standardize
            </param>
      <returns>
            Standardized element type name
            </returns>
      <example>
            OpenAIAPI.IResponseChat is a custom type, as it is defined in the OpenAIAPI library instead of in AIAssistants. The standardized type is IChat.
            </example>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.RemoveConfiguration(AIAssistants.Interfaces.IAPIElement)">
      <summary>
            Remove the element configuration
            </summary>
      <param name="fromElement">
            IAPIelement to remove from the configuration
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.ReadConfiguration(System.String)">
      <summary>
            Read configuration from a given path
            </summary>
      <param name="path">
            Path to the configuration file
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.WriteConfiguration(System.String)">
      <summary>
            Write configuration to a given path
            </summary>
      <param name="path">
            Path to the configuration file
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.CleanTextForSpeech(System.Collections.Generic.List{System.String})">
      <summary>
            Remove format marks frm a text to use it in audio speech
            </summary>
      <param name="text">
            Text lines
            </param>
      <returns>
            Cleaned text lines
            </returns>
      <remarks>
            This method is used to clean the text from format marks that are not needed in audio speech.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.GetPlayerOutputFormatter(System.String)">
      <summary>
            Get a formatter for player's output for a given mimetype
            </summary>
      <param name="mimetype">
            Output format required
            </param>
      <returns>
            Proper formatter for the output o null if not available
            </returns>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.AvailablePLayerTypes">
      <summary>
            Enumerate available player interfaces
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAPIManager.AvailableElementTypes">
      <summary>
            Enumerate available element interfaces
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.NameToTYpe(System.String)">
      <summary>
            Get the actual type of a type name
            </summary>
      <param name="typeName">
            Type name
            </param>
      <returns>
            Actual Type object or null if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.AvailableInstances(System.String)">
      <summary>
            List of available instances for a given element type
            </summary>
      <param name="elementType">
            Element interface type
            </param>
      <returns>
            List of ObjectWrapper with the available instances name and identifier
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.GetCurrentElements(System.String)">
      <summary>
            Enumerate all configured elements
            </summary>
      <param name="elementType">
            Element interface type
            </param>
      <returns>
            Wrapped instance list of elements in the configuration file.
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.GetOtherElements(System.String)">
      <summary>
            Enumerate all non-configured elements
            </summary>
      <param name="elementType">
            Element interface type
            </param>
      <returns>
            Wrapped instance list of elements in the cloud, but not in the configuration file.
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.CreateElement(System.String,System.String)">
      <summary>
            Create new element instance of a given type
            </summary>
      <param name="elementType">
            Element interface type
            </param>
      <param name="id">
            Element unique identifier
            </param>
      <returns>
            Instance of a new element
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.AvailableModels(AIAssistants.Interfaces.IModelUser)">
      <summary>
            Get the available models for a given AI player
            </summary>
      <param name="muser">
            Player to get the available models for
            </param>
      <returns>
            List of available model names
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.AvailableLLMModels">
      <summary>
            Get the available LLM models
            </summary>
      <returns>
            List of available model names
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAPIManager.DeleteModel(System.String)">
      <summary>
            Delete a model if allowed
            </summary>
      <param name="model">
            Model name
            </param>
      <returns>
            True if the model was deleted
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IAppAutomation">
      <summary>
            Inteface to interact with user applications
            </summary>
      <remarks>
            This is an interface needed for the application to communicate with the AI API.
            The AI API and the application can collaborate with each other to provide a better user experience. 
            Applications can access resources and services that AI API cannot (file system, databases, network, etc.)
            The application must be responsible for checking the convenience of whether or not serving API requests.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomationExtension" />
      <seealso cref="T:AIAssistants.Interfaces.IApplicationService" />
      <seealso cref="T:AIAssistants.JSON.FunctionDef" />
      <seealso cref="T:AIAssistants.JSON.PlayCollection" />
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
      <seealso cref="T:AIAssistants.Interfaces.IHelpConsole" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIManager" />
      <seealso cref="T:AIAssistants.Interfaces.IIntegrationDataReader" />
      <seealso cref="T:AIAssistants.Interfaces.IDataIntegration" />
      <seealso cref="T:AIAssistants.JSON.FunctionResponse" />
      <seealso cref="T:AIAssistants.JSON.AppDocumentRepository" />
      <seealso cref="T:AIAssistants.JSON.ApplicationDocument" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.Plays">
      <summary>
            Collection of play configurations
            </summary>
      <example>
            An example of use of this property is in the cfPlay Form in the AIAPIWinAdmin project.
            It is a child form that allows create, moddify and save play configurations.
            </example>
      <remarks>
            A play is the configuration of a set of participants with different roles that can work together.
            The play configuration is a JSON object that contains the configuration of the play.
            This file is managed by the application.
            Consumers can ask the application for all available plays using this property.
            </remarks>
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="!:AIAPIWinAdmin.cfPlay" />
      <seealso cref="T:AIAssistants.Interfaces.IHelpConsole" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.CurrentPlay">
      <summary>
            Get the current active play
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.CurrentConsole">
      <summary>
            Get the current active console
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.Documents">
      <summary>
            Central repository for application documents
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.AppServices">
      <summary>
            List of application automation services
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.ServiceNames">
      <summary>
            List of available service names
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.ApplicationFunctions">
      <summary>
            List of all functions available to the application services consumers
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.ApplicationRole">
      <summary>
            Name of the application role for application responses to function calls
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.LogPathBase">
      <summary>
            Base path for log files
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.AssemblySignatures">
      <summary>
            This is a property intended to get assembly attribute names used to recognize assemblies related to the application or application ecosystem.
            </summary>
      <remarks>
            Each string is a full name of an assembly attribute and the name of the value property name, sepparated by a comma.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.CheckAssemblySignature(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
      <summary>
            Check whether an assembly is related to the application or belongs to the application ecosystem.
            </summary>
      <param name="signatures">
            Dictionary of asembly attributes and values
            </param>
      <param name="whatfor">
            Reason to check the assembly
            </param>
      <remarks>
            Each key is the full name of an assembly attribute and the name of the value property name, sepparated by a comma, and the value is the value for that attribute in the assembly being checked.
            When you need to process an assembly, you can use this method to check if the assembly has the required attributes with the expected values.
            It's on the consumer to decide whether check only one or a set of attributes.
            </remarks>
      <returns>
            True if the assembly is related to the application or belongs to the application ecosystem.
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.GetCredentialString(System.String)">
      <summary>
            Get a credential string from the application credential repository
            </summary>
      <param name="key">
            Credential key string. Semi-colon separated key name and other components.
            </param>
      <returns>
            Credential string
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.AddAppExtension(AIAssistants.Interfaces.IAppAutomationExtension)">
      <summary>
            Add service extensions to the main application
            </summary>
      <param name="extension">
            New service extension
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.SetCurrentPlay(AIAssistants.Interfaces.IPlay,System.Boolean)">
      <summary>
            Show help console with a given play
            </summary>
      <param name="play">
            Play with the cast of console players
            </param>
      <param name="showConsole">
            Show help console
            </param>
      <remarks>
            A play is the configuration of a set of participants with different roles that can work together.
            The play configuration is a JSON object that contains the configuration of the play.
            This file is managed by the application.
            Consumers can ask the application for all available plays using this property.
            The application is responsible for showing the Help Console, which is a console where users can interact with other AI players like assistants or chats.
            </remarks>
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.Interfaces.IHelpConsole" />
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.SetCurrentPlayer(AIAssistants.Interfaces.IAPIPlayer)">
      <summary>
            Current player in the play
            </summary>
      <param name="player">
            IAPIPlayer assistant
            </param>
      <remarks>
            IHelpConsole sets this porperty for the application to set console menu commands as needed.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.ContactsForApplication(System.String)">
      <summary>
            Get a list of contacts for external applications
            </summary>
      <param name="appid">
            Extenal application identifier
            </param>
      <returns>
            List of contacts
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.SavePlayConfiguration">
      <summary>
            Save play configuration
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.SendMessageToPlayer(AIAssistants.Interfaces.IAPIPlayer,AIAssistants.Data.ContextMessage)">
      <summary>
            Send a message to a player
            </summary>
      <param name="player">
            Player to receive the message
            </param>
      <param name="msg">
            Message to send
            </param>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.ApiManagers">
      <summary>
            List of supported API Managers
            </summary>
      <remarks>
            Use dependency injection to add API Managers to this list.
            Usually, there will be only one API Manager for each AI provider supported.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomation.IntegrationObjects">
      <summary>
            List of supported integration data readers
            </summary>
      <remarks>
            Use dependency injection to add integration data readers to this list.
            Users can select the integration data reader to better fit their needs.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IDataIntegration" />
      <seealso cref="T:AIAssistants.Interfaces.IIntegrationDataReader" />
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.GetAPIManager(System.Type,System.String)">
      <summary>
            Get an API Manager by type
            </summary>
      <param name="type">
            API Manager type
            </param>
      <param name="id">
            API Manager unique identifier
            </param>
      <returns>
            API Manager instance or null if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.GetPlayerByName(System.String)">
      <summary>
            Find a player in the current play by its name
            </summary>
      <param name="playerName">
            Player name
            </param>
      <returns>
            Found player or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.EditPlayerConfiguration(AIAssistants.Interfaces.IAPIPlayer)">
      <summary>
            Give a chance to the application to edit player configuration.
            </summary>
      <param name="player">
            Player to edit
            </param>
      <returns>
            True if the application managed to edit the player configuration.
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.GetPlayerByID(System.String)">
      <summary>
            Find a player in all plays by its unique identifier
            </summary>
      <param name="playerId">
            Player unique identifier
            </param>
      <returns>
            Found player or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.CallFunction(AIAssistants.Interfaces.IPlayer,AIAssistants.JSON.FunctionBatch)">
      <summary>
            Make a call to a function
            </summary>
      <param name="caller">
            Function caller
            </param>
      <param name="calls">
            Block of function calls
            </param>
      <returns>
            FunctionBatch with the call results
            </returns>
      <remarks>
            This is the method for AI agents to request the application to perform a function call.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.CaptureActiveForm(AIAssistants.Data.ContextMessage,System.Drawing.Imaging.ImageFormat,System.String)">
      <summary>
            Capture an image from the active form, upload it to a server, and set the image URL in the message
            </summary>
      <param name="msg">
            Message to set the image URL
            </param>
      <param name="format">
            Data format
            </param>
      <param name="filename">
            Name to save the image file. Null to use a default name.
            </param>
      <returns>
            Key to delete the image from the server
            </returns>
      <remarks>
            This method is useful to provide AI agents with image captures of the current form to better assists users.
            ContexMessage is a generic format to use instead of the actual AI provider message formats.
            AI objects must translate the ContextMessage to the final AI provider message format.
            The MessageUrl of the ContextMessage will contain a URL to download the image captured.
            </remarks>
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.UploadImage(AIAssistants.Data.ContextMessage,System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.String)">
      <summary>
            Upload an image to the server
            </summary>
      <param name="msg">
            Message to set the image URL. It can be null.
            </param>
      <param name="image">
            Data to upload or null to use filename
            </param>
      <param name="format">
            Data format
            </param>
      <param name="filename">
            Data path
            </param>
      <returns>
            Key to delete the image from the server
            </returns>
      <remarks>
            This method is simmillar to CaptureActiveForm, but it allows users to upload any image to the server.
            This image can be used as a message attachment for the AI provider.
            If msg is not null, the MessageUrl will contain a URL to download the image.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.RemoveImageFromServer(System.String)">
      <summary>
            Remove an image from the server
            </summary>
      <param name="deletekey">
            Data deletion key
            </param>
      <returns>
            Error message or null if successful
            </returns>
      <remarks>
            Use this method to discard images uploaded to the server when there is no need for them anymore.
            You can use also a single-name policy for all discardable images to avoid managing deletion.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomation.LogUsageData(System.String,System.String,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Log token usage for a given player
            </summary>
      <param name="playername">
            Assistant name
            </param>
      <param name="model">
            Model used for the request
            </param>
      <param name="temperature">
            Value for the temperature parameter used in the request
            </param>
      <param name="topp">
            Value for the topp parameter used in the request
            </param>
      <param name="input_tokens">
            Tokens used for input (prompt)
            </param>
      <param name="output_tokens">
            Tokens generated by the AI assistant (response)
            </param>
      <param name="audio_input_tokens">
            Audio input tokens used for the request, if any.
            </param>
      <param name="audio_output_tokens">
            Audio output tokens generated by the AI assistant, if any.
            </param>
      <param name="reasoning_tokens">
            Reasoning tokens used by the AI assistant, if any.
            </param>
      <param name="input_cached_tokens">
            Tokens used for cached input, if any.
            </param>
      <param name="input_image_tokens">
            Tokens used for input images, if any.
            </param>
      <param name="input_text_tokens">
            Tokens used for input text, if any.
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IAppAutomationExtension">
      <summary>
            Extensions for IAppAutomation applications
            </summary>
      <example>
            The WebSearchExtension project is an example of implementation of the IAppAutomationExtension interface; it provides services for the AI agents to perform web searches.
            </example>
      <remarks>
            Using classes that implement this interface, the application can extend its services depending on the platform it is working.
            Those classes can be implemented in separate libraries and loaded dynamically by the application using dependency injection methods.
            Use ExtensionItem objets to store and retrieve the extension information in configuration files.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <seealso cref="T:AIAssistants.Data.ExtensionItem" />
      <seealso cref="T:AIAssistants.Interfaces.IApplicationService" />
      <seealso cref="T:GlobalCommonEntities.Interfaces.IStandardObject" />
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
      <seealso cref="T:AIAssistants.Interfaces.IStreamReadWriter" />
      <seealso cref="!:Extensions.json" />
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomationExtension.EnableLog">
      <summary>
            Enable or disable logging if the extension has a log file
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IAppAutomationExtension.AppAutomation">
      <summary>
            Application automation interface
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomationExtension.GetServices(AIAssistants.Interfaces.IAppAutomation)">
      <summary>
            List of extension automation services
            </summary>
      <param name="owner">
            Main IAppAutomation object (represents the application)
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IAppAutomationExtension.CallFunction(AIAssistants.Interfaces.IPlayer,AIAssistants.JSON.FunctionBatch)">
      <summary>
            Make a call to a function
            </summary>
      <param name="caller">
            Function caller
            </param>
      <param name="calls">
            Block of function calls
            </param>
      <returns>
            FunctionBatch with the call results
            </returns>
      <remarks>
            Use this method to call service functions in the extension.
            Extensions must return null if they do not manage the function call.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IApplicationService">
      <summary>
            Interface to define application services
            </summary>
      <remarks>
            Application services are sets of functions available to perform certain tasks.
            Consumers an use the service functions to interact with the application.
            Each service has a prompt with additional instructions to tell assistants how to interact with the service. 
            Use application services to organize the functions of the application.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <seealso cref="T:AIAssistants.JSON.FunctionDef" />"/&gt;
        </member>
    <member name="P:AIAssistants.Interfaces.IApplicationService.Identifier">
      <summary>
            Service unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IApplicationService.AppAutomation">
      <summary>
            Service owner
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IApplicationService.AppPrompt">
      <summary>
            Prompt to tell assistants how to interact with the service
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IApplicationService.ServiceFunctions">
      <summary>
            List of functions available for the service
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IApplicationService.AddFunctions(System.Collections.Generic.List{AIAssistants.JSON.FunctionDef},System.String)">
      <summary>
            Add a list of qualified functions to the service
            </summary>
      <param name="functions">
            Function list
            </param>
      <param name="prefix">
            Prefix to select the functions. If null use the service identifier as prefix
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.IConsoleService">
      <summary>
            Service that adds a page to the console
            </summary>
      <seealso cref="T:AIAssistants.Interfaces.IMessagesConsole" />
    </member>
    <member name="P:AIAssistants.Interfaces.IConsoleService.Title">
      <summary>
            Page title
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IConsoleService.Description">
      <summary>
            Page description
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IConsoleService.ConsolePage">
      <summary>
            Console page
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IAssistant">
      <summary>
            Assistant player type
            </summary>
      <example>
            The OpenAIAssistant class in the OpenAIAPI library is an example of implementation of this interface.
            </example>
      <remarks>
            Assistants are AI players more sophisticated and specialized than chats.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIManager" />
      <seealso cref="!:ObjectWrapper" />
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="T:AIAssistants.Interfaces.IConversation" />
      <seealso cref="T:AIAssistants.Interfaces.IStorableElement" />
      <seealso cref="T:AIAssistants.Interfaces.IConversationalPlayer" />
    </member>
    <member name="T:AIAssistants.Interfaces.IChat">
      <summary>
            Interface to chat with the user
            </summary>
      <example>
            The OpenAIChat class in the OpenAIAPI project implements this interface
            </example>
      <remarks>
            Chats are differnet from assistants in that they are simpler and less specialized.
            Assistants use a complex structure of threads and runs to manage the conversation. Chats use a simpler prompt history list.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="T:GlobalCommonEntities.Interfaces.IUIDataSheet" />
    </member>
    <member name="P:AIAssistants.Interfaces.IChat.ChatMessages">
      <summary>
            Chat messages collection
            </summary>
      <remarks>
            This is the current chat history message list.
            Chats can be implemented with different data structures. UIDataSheet objects expose its properties in a standardized way.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IChat.NewChat(System.Collections.Generic.List{AIAssistants.Data.ContextMessage})">
      <summary>
            Create a new chat conversation
            </summary>
      <param name="context">
            Conversation context
            </param>
      <returns>
            Object with the chat implementation
            </returns>
      <remarks>
            Use this method to reset the chat history and start a new conversation.
            To interact with the chat, use the IAPIPlayer SendPrompt method.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IDataIntegration">
      <summary>
            Interface for massive data integration
            </summary>
      <example>
            Examples of classes implementing this interface are the OpenAIFineTuning and OpenAIChat classes in the OPenAIAPI project.
            This class uses the IntegrationDataReader class to read complex message structures for Fine-tuning and chat completion OpenAI objects.
            </example>
      <seealso cref="T:AIAssistants.Data.IntegrationColumnSet" />
      <seealso cref="T:AIAssistants.Interfaces.IIntegrationDataReader" />
    </member>
    <member name="P:AIAssistants.Interfaces.IDataIntegration.IntegrationSets">
      <summary>
            Get the list of integration set names
            </summary>
      <remarks>
            A class can use different integration sets to integrate different data.
            This is a list of all available set names.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IDataIntegration.GetIntegrationSet(System.String)">
      <summary>
            Get the column list for a given set
            </summary>
      <param name="setName">
            Integration set name
            </param>
      <returns>
            Integration set column list
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IDataIntegration.BulkLoad(System.Data.DataTable,System.String)">
      <summary>
            Integrate objects from a data table
            </summary>
      <param name="data">
            DataTable with integration data
            </param>
      <param name="setName">
            Integration set name
            </param>
      <returns>
            Error message list
            </returns>
      <example>
            An example of use of this method is in the tsbImportMsg_Click event handler of the cfTuning form, in the AIAPIWinAdmin project.
            </example>
      <remarks>
            Use an IIntegrationDataReader to read the data from a file or stream and get the data DataTable using the ReadDataSheet method.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IEmbedding">
      <summary>
            Embeddings measure the relatedness of text strings.
            </summary>
      <example>
            Embeddings are commonly used for:
            Search(where results are ranked by relevance to a query string)
            Clustering(where text strings are grouped by similarity)
            Recommendations(where items with related text strings are recommended)
            Anomaly detection(where outliers with little relatedness are identified)
            Diversity measurement(where similarity distributions are analyzed)
            Classification(where text strings are classified by their most similar label)
            The class OpenAIEmbedding in the OpenAIAPI library implements this interface.
            </example>
      <remarks>
            An embedding is a vector(list) of floating point numbers.The distance between two vectors measures their relatedness.Small distances suggest high relatedness and large distances suggest low relatedness.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IModelUser" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
    </member>
    <member name="M:AIAssistants.Interfaces.IEmbedding.CreateEmbedding">
      <summary>
            Create an embedding vector.
            </summary>
      <returns>
            List of embedding vectors, which are lists of floating point numbers.
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IIntegrationDataReader">
      <summary>
            Interface for classes implementing integration data readers
            </summary>
      <example>
            An examplo of implementation is the ExcelDataReader class
            </example>
      <remarks>
            Some Json structures are difficult to write by hand, like jsonl message files for model tuning.
            This class helps to create a template file for a given column set, and read the data from the file.
            The consumer of this class must provide a column set to create the template, and process the data.
            The consumer must know how to process the data, and how to use the column set.
            </remarks>
      <seealso cref="T:AIAssistants.Data.IntegrationColumnSet" />
      <seealso cref="T:AIAssistants.Interfaces.IDataIntegration" />
    </member>
    <member name="M:AIAssistants.Interfaces.IIntegrationDataReader.CreateDataTemplateFile(AIAssistants.Data.IntegrationColumnSet)">
      <summary>
            Create a data template file for a given column set
            </summary>
      <param name="columns">
            Columns set
            </param>
      <returns>
            Template file name
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IIntegrationDataReader.WriteDataTemplateStream(AIAssistants.Data.IntegrationColumnSet,System.IO.Stream)">
      <summary>
            Write a data template in a stream for a given column set
            </summary>
      <param name="columns">
            Columns set
            </param>
      <param name="stream">
            Stream to write the template
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IIntegrationDataReader.ReadDataSheet(System.String)">
      <summary>
            Read a data sheet from a file
            </summary>
      <param name="filename">
            Data file name
            </param>
      <returns>
            Data table with the data
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IIntegrationDataReader.ReadDataSheet(System.IO.Stream)">
      <summary>
            Read a data sheet from a stream
            </summary>
      <param name="stream">
            Stream with the data
            </param>
      <returns>
            Data table with the data
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IModelUser">
      <summary>
            API elements that use an AI model
            </summary>
      <remarks>
            Add this interface for objects that use an AI model
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:GlobalCommonEntities.UI.PropertyEditorInfo" />
      <descendant>IAPIPlayer</descendant>
      <descendant>IEmbedding</descendant>
      <descendant>ITuningJob</descendant>
      <descendant>ISpeechManager</descendant>
    </member>
    <member name="P:AIAssistants.Interfaces.IModelUser.MaxRequestRatePerMinute">
      <summary>
            Maxumum number of requests per minute
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IModelUser.MaxRequestRatePerDay">
      <summary>
            Maximum number of requests per day
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IModelUser.Model">
      <summary>
            AI model identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IModelUser.Temperature">
      <summary>
            What sampling temperature to use, between 0 and 2.
            Higher values make the output more random, lower values make it more deterministic. Defaults to 1.
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IModelUser.TopP">
      <summary>
            An alternative to sampling with temperature, called nucleus sampling. 
            Model considers the results of tokens with top_p probability mass. Defaults to 1.
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IModelUser.ModelProperty">
      <summary>
            Property editor information to set the available model list.
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IModelUser.ReasoningEffort(System.String@)">
      <summary>
            Gets or sets the reasoning effort level
            </summary>
      <param name="currentReasoning">
            Pass null to get the current reasoning effort level. Pass a string to set a new reasoning effort level. Empty string to remove reasoning effort level.
            </param>
      <returns>
            List of available reasoning effort levels, Null if the model does not support reasoning effort levels.
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IObjectToFormattedString">
      <summary>
            Interface to convert objects to formatted strings
            </summary>
      <example>
            Implement this interface in objects that convert objects in RTF or HTML, for instance.
            Objects can be strings, string lists, or any other object that can be converted to a formatted string.
            It is up to the implementation to define the allowed input object types.
            </example>
      <remarks>
            In order to convert an object to a formatted string, the input object must have some kind of known markup.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IObjectToFormattedString.TextLimits">
      <summary>
            Text container size limits
            </summary>
      <remarks>
            This interface is intended to provide visual text or image representations of objects.
            This property provides information about the container limits to the formatter.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IObjectToFormattedString.BoldLines">
      <summary>
            Bold Text lines count
            </summary>
      <remarks>
            Bold and regular text have different interline sizes. 
            This property provides the number of bold lines in the text to help calculating the needed container height.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IObjectToFormattedString.CodeLines">
      <summary>
            Lines of text detected as source code
            </summary>
      <remarks>
            If the code contains source code, this property provides the lines of code extracted from the text.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IObjectToFormattedString.ConvertObjectToString(System.Object)">
      <summary>
            Get a string formatted representation of an object
            </summary>
      <param name="obj">
            Object to convert to string
            </param>
      <returns>
            string array representation of the object
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.CodeLine">
      <summary>
            Source code line definition
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CodeLine.Line">
      <summary>
            Line text
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CodeLine.Syntax">
      <summary>
            Code syntax identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CodeLine.Position">
      <summary>
            Firs line char position
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CodeLine.Length">
      <summary>
            Text length
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IPlayer">
      <summary>
            PLay player common interface to users and API assistants and chats
            </summary>
      <remarks>
            Basic configuration visual player settings
            </remarks>
      <descendant>IAPIPlayer</descendant>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.PlayerName">
      <summary>
            Player name
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.PlayerRole">
      <summary>
            Player role
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.Reminder">
      <summary>
            Message that will be sent on each request to remind the player important things
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.AllowedServices">
      <summary>
            List of allowed application services identifiers
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.BackColor">
      <summary>
            Bubble header background color
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.ForeColor">
      <summary>
            Bubble header foreground color
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.PrivateConsole">
      <summary>
            Console to show player messages
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayer.PlayerSettings">
      <summary>
            Specific player settings
            </summary>
      <remarks>
            This is an extended data sheet for specific player settings, if needed.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IPlayerAsset">
      <summary>
            Interface for auxiliary player assets
            </summary>
      <remarks>
            This interface has no properties or methods, it is used to characterize player assets using a common interface.
            The IEquatable interface is implemented to allow locate assets in specialized lists.
            </remarks>
      <descendant>IAssistant</descendant>
      <descendant>IChat</descendant>
      <descendant>IEmbedding</descendant>
      <descendant>IFileManager</descendant>
      <descendant>IFilePackageManager</descendant>
      <descendant>ISpeechManager</descendant>
    </member>
    <member name="T:AIAssistants.Interfaces.IPlayerInteraction">
      <summary>
            Generic interface for player interactions
            </summary>
      <remarks>
            This interface is used to define player interactions in a generic way.
            </remarks>
      <descendant>IDesktopPlayerInteraction</descendant>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayerInteraction.Who">
      <summary>
            Player who is talking
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayerInteraction.ToWhom">
      <summary>
            Player who is listening
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayerInteraction.Speak">
      <summary>
            Read the prompt using voice generator
            </summary>
      <remarks>
            Usually, it is the console who decides whether or not use the voice generator.
            This property is used to store this setting, in case you want to replay the conversation.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayerInteraction.Thinking">
      <summary>
            Thinking bubble mode
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlayerInteraction.Text">
      <summary>
            Interaction text message
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlayerInteraction.NewInteractionInstance(AIAssistants.Interfaces.IPlayer,AIAssistants.Interfaces.IPlayer,System.Boolean)">
      <summary>
            Create a new interaction instance
            </summary>
      <param name="who">
            Player who is talking
            </param>
      <param name="toWhom">
            Player who is listening
            </param>
      <param name="speak">
            Read the prompt using voice generator
            </param>
      <returns>
            New interaction instance
            </returns>
      <remarks>
            This interface just defines the most basic interaction properties. Depending on the platform, there can be more specialized interfaces.
            Using this interface, you can create a new instance of a player interaction without need of knowing the specific type of the interaction class.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.IStreamReadWriter">
      <summary>
            Interface to add stream read/write capabilities to an object
            </summary>
      <example>
            In the OpneAI implementation, assistants are stored in the OpenaAI cloud, Chats, for instance, are not. 
            OpenAIChat implements this interface to save and load its configuration in Json files, so there can be different IChat player configurations.
            In final-user applications, it is important to prtovide all AI assistants properly configured, as the configuration can be very tricky for non-technical users.
            </example>
      <remarks>
            IMplement this interface in classes that need to save and load configuration data from a stream.
            </remarks>
      <descendant>IAppAutomationExtension</descendant>
    </member>
    <member name="M:AIAssistants.Interfaces.IStreamReadWriter.SaveToStream(System.IO.Stream,System.Boolean)">
      <summary>
            Save the element to a stream
            </summary>
      <param name="stream">
            Target Stream
            </param>
      <param name="formatted">
            Save formatted data
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IStreamReadWriter.LoadFromStream(System.IO.Stream)">
      <summary>
            Load the element from a stream
            </summary>
      <param name="stream">
            Source Stream
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.ITuningJob">
      <summary>
            Iterface for model tuning jobs
            </summary>
      <example>
            The class OpenAIFineTuning, in the OpenAIAPI project, implements this interface.
            </example>
      <remarks>
            Model tuning objects are considered tools in this solution.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:AIAssistants.Interfaces.IModelUser" />
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
    </member>
    <member name="P:AIAssistants.Interfaces.ITuningJob.TrainingData">
      <summary>
            List of training data elements
            </summary>
      <remarks>
            UIDataSheet objects allow use different data formats with a standardized edition interface.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.ITuningJob.SaveTrainingData(System.Boolean)">
      <summary>
            Training data validated. Save it to ptocess job
            </summary>
      <param name="validation">
            Save data for validation
            </param>
      <returns>
            Error message if any
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.ITuningJob.ListJobs(System.Object[])">
      <summary>
            Get a list of all tuning jobs
            </summary>
      <param name="args">
            Aditional parameter list, in the form of url query parameters (name=value)
            </param>
      <returns>
            List of jobs wrapped on a common object
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.ITuningJob.CreateJob(GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Create a new tuning job
            </summary>
      <param name="job">
            Job creation data
            </param>
      <returns>
            Wrapped job object
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.ITuningJob.GetJob(System.String)">
      <summary>
            Retrieve an existing job
            </summary>
      <param name="jobid">
            Job unique identifier
            </param>
      <returns>
            Wrapped job object
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.ITuningJob.CancelJob(System.String)">
      <summary>
            Cancel a running job
            </summary>
      <param name="jobid">
            Job unique identifier
            </param>
      <returns>
            Cancelled job wrapped object
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IFileManager">
      <summary>
            Interface for file management
            </summary>
      <example>
            The OpenAIFileManager class in the OpenAIAPI project implements this interface.
            </example>
      <remarks>
            This interface is used to manage files in the AI system. 
            Files can be local, or stored in servers or cloud systems. That is on the provider implementation.
            This kind of interface is considered an auxiliary element or tool in this solution.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
    </member>
    <member name="P:AIAssistants.Interfaces.IFileManager.DefaultExpirationTime">
      <summary>
            Default expiration time for uploaded files
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.AllowedFileExtensions(AIAssistants.Interfaces.ToolTypes)">
      <summary>
            List of allowed file extensions
            </summary>
      <param name="tool">
            Tool type
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.MimeTypeForExtension(System.String,AIAssistants.Interfaces.FileFormat@)">
      <summary>
            Get the MIME type for a file extension
            </summary>
      <param name="extension">
            File extension
            </param>
      <param name="format">
            File format as out parameter
            </param>
      <returns>
            Mime type or null if extension is not allowed
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.UploadFile(System.String,System.Object[])">
      <summary>
            Upload a file
            </summary>
      <param name="filename">
            Path and name of the file
            </param>
      <param name="args">
            Extra arguments to upload file
            </param>
      <remarks>
            The extra arguments are specific of each provider implementation.
            Note that IAPIElement has a method QueryExtraArgs to help with the extra arguments.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)" />
      <seealso cref="!:ExtraArgs" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.UploadFile(System.Byte[],System.String,System.Object[])">
      <summary>
            Upload a file
            </summary>
      <param name="content">
            File content as a byte array
            </param>
      <param name="filename">
            Path and name of the file
            </param>
      <param name="args">
            Extra arguments to upload file
            </param>
      <remarks>
            The extra arguments are specific of each provider implementation.
            Note that IAPIElement has a method QueryExtraArgs to help with the extra arguments.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)" />
      <seealso cref="!:ExtraArgs" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.UploadFile(System.String,System.IO.Stream,System.Object[])">
      <summary>
            Upload a file
            </summary>
      <param name="filename">
            Path and name of the file
            </param>
      <param name="data">
            Stream with the data to upload
            </param>
      <param name="args">
            Extra arguments to upload file
            </param>
      <remarks>
            The extra arguments are specific of each provider implementation.
            Note that IAPIElement has a method QueryExtraArgs to help with the extra arguments.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)" />
      <seealso cref="!:ExtraArgs" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.UploadImage(System.String)">
      <summary>
            Upload an image
            </summary>
      <param name="filename">
            Image file name
            </param>
      <returns>
            File unique identifier
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.UploadImage(System.Byte[],System.String)">
      <summary>
            Upload an image
            </summary>
      <param name="content">
            Image content as a byte array
            </param>
      <param name="filename">
            Image file name
            </param>
      <returns>
            File unique identifier
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.DownloadFile(System.String)">
      <summary>
            Upload a file
            </summary>
      <param name="filid">
            File unique identifier
            </param>
      <remarks>
            ObjectWrapper objects have a UID property that contains the unique identifier of the object.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.GetFileContent(System.String)">
      <summary>
            Retrieve the content of a file
            </summary>
      <param name="fileid">
            File unique identifier
            </param>
      <returns>
            The file content as byte array
            </returns>
      <remarks>
            ObjectWrapper objects have a UID property that contains the unique identifier of the object.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.GetFileIdByName(System.String)">
      <summary>
            Get the file id from a file name
            </summary>
      <param name="filename">
            Name of the file
            </param>
      <returns>
            File unique identifier or empty string if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.GetFileNameById(System.String)">
      <summary>
            Get a file name from a file id
            </summary>
      <param name="uid">
            File unique identifier
            </param>
      <returns>
            File name or empty string if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.DeleteFile(System.String,System.String)">
      <summary>
            Delete a file
            </summary>
      <param name="fileid">
            Unique identifier of the file or null (to use filename)
            </param>
      <param name="filename">
            Name of the file
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.DeleteFileIfExists(System.String)">
      <summary>
            Delete a file if exists
            </summary>
      <param name="filename">
            Name of the file
            </param>
      <returns>
            Deleted file unique identifier or empty string if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFileManager.GetFileList(System.Object[])">
      <summary>
            Get a list of all files
            </summary>
      <example>
            An example of extra arguments for listings are the OpenAI listing paging standard parameters: limit, after, before, and so on.
            </example>
      <param name="args">
            Aditional parameter list, in the form of url query parameters (name=value)
            </param>
      <returns>
            List of files wrapped on a common object
            </returns>
      <remarks>
            The extra arguments are specific of each provider implementation.
            Note that IAPIElement has a method QueryExtraArgs to help with the extra arguments.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)" />
      <seealso cref="!:ExtraArgs" />
    </member>
    <member name="T:AIAssistants.Interfaces.IFilePackageManager">
      <summary>
            File collection manager interface
            </summary>
      <example>
            An example of impelemtation is the OPenAIVectorStoreManager class in the OpenAI project.
            </example>
      <remarks>
            This interface is used to manage sets of files in the AI system.
            Files can be local, or stored in servers or cloud systems. That is on the provider implementation.
            This kind of interface is considered an auxiliary element or tool in this solution.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
      <seealso cref="T:AIAssistants.Interfaces.IFileManager" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
    </member>
    <member name="P:AIAssistants.Interfaces.IFilePackageManager.FileManager">
      <summary>
            Interface to manage files
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.CreatePackage(System.Collections.Generic.List{System.String},System.String)">
      <summary>
            Create a new File Package
            </summary>
      <param name="fileids">
            List of file identifiers
            </param>
      <param name="name">
            File package name
            </param>
      <returns>
            File package object
            </returns>
      <remarks>
            Note that you pass a list of file identifiers, not the file names or the files themselves.
            You have first to upload the files and get their identifiers using the IFileManager tool.
            Use the IFileManger object in the FileManager property to upload the files.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IFileManager" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.ListPackages(System.Object[])">
      <summary>
            Get all file collections
            </summary>
      <param name="args">
            Aditional parameter list, in the form of url query parameters (name=value)
            </param>
      <returns>
            List of file packages as generic wrapped objects
            </returns>
      <remarks>
            The extra arguments are specific of each provider implementation.
            Note that IAPIElement has a method QueryExtraArgs to help with the extra arguments.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)" />
      <seealso cref="!:ExtraArgs" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.GetPackage(System.String)">
      <summary>
            Get a given file package
            </summary>
      <param name="id">
            File package identifier
            </param>
      <returns>
            File package object
            </returns>
      <remarks>
            Use the standard UID property of the ObjectWrapper objects to get the identifier of the file package.
            </remarks>
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.ModifyPackage(GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Modify a file package
            </summary>
      <param name="package">
            Modified package object
            </param>
      <returns>
            Modified package object
            </returns>
      <remarks>
            Use the returned objects of the ListPackages method as arguments to this method.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.DeletePackage(System.String)">
      <summary>
            Delete a file package
            </summary>
      <param name="id">
            File package identifier
            </param>
      <returns>
            True if the package was deleted
            </returns>
      <remarks>
            Use the standard UID property of the ObjectWrapper objects to get the identifier of the file package.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.AddFile(System.String,System.String)">
      <summary>
            Add a file to a package
            </summary>
      <param name="packageid">
            Package identifier
            </param>
      <param name="fileid">
            File identifier
            </param>
      <returns>
            File object
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.ListPackageFiles(System.String,System.Object[])">
      <summary>
            Get all files un a file collections
            </summary>
      <param name="id">
            File package identifier
            </param>
      <param name="args">
            Aditional parameter list, in the form of url query parameters (name=value)
            </param>
      <returns>
            List of files as generic wrapped objects
            </returns>
      <remarks>
            The extra arguments are specific of each provider implementation.
            Note that IAPIElement has a method QueryExtraArgs to help with the extra arguments.
            </remarks>
      <seealso cref="M:AIAssistants.Interfaces.IAPIElement.QueryExtraArgs(System.String)" />
      <seealso cref="!:ExtraArgs" />
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.GetPackageFile(System.String,System.String)">
      <summary>
            Get a file from a given file package
            </summary>
      <param name="id">
            File package identifier
            </param>
      <param name="fileid">
            File identifier
            </param>
      <returns>
            File package file object
            </returns>
      <remarks>
            Note that you pass file and package identifier, not the objects themselves.
            You have first to create the package and add the files.
            Use the IFileManger object in the FileManager property to upload the files when needed, and the AddFile method to add them to the package.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IFilePackageManager.DeletePackageFile(System.String,System.String)">
      <summary>
            Delete a file of a file package
            </summary>
      <param name="id">
            File package identifier
            </param>
      <param name="fileid">
            File identifier
            </param>
      <returns>
            True if the package was deleted
            </returns>
      <remarks>
            Note that you pass file and package identifier, not the objects themselves.
            The package and the file must be already created.
            </remarks>
    </member>
    <member name="T:AIAssistants.Interfaces.ConsoleOptions">
      <summary>
            Enumeration of standard console options
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IHelpConsole">
      <summary>
            Console help interface
            </summary>
      <example>
            An example is the APIConsole class in the DesktopAIAssistant project.
            It is a Windows Forms control to use in desktop Windows applications.
            </example>
      <remarks>
            The help console is intended to be a playground where users can interact with AI players like chats and assistants.
            An application having a help console should have specialized players in the application or its subject to interact with the user.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerInteraction" />
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:AIAssistants.Data.APIUIDataSheet" />
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.Options">
      <summary>
            Get or set the console options to enable or disable features
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.EnableUserInput">
      <summary>
            Enable or disable the console user input
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.AppAutomation">
      <summary>
            Application automation interface
            </summary>
      <remarks>
            The application automation interface is needed for the application to communicate with the AI API.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.AvailableExtensions">
      <summary>
            List of available console extension names, with friendly name and description.
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.PlayerInteraction">
      <summary>
            Player interaction interface
            </summary>
      <example>
            Examples of player inetractions are:
            user asks for an image to an IImageGenerator player
            user asks a question to an IChat or IAssistant player.
            IImageGenerator player gives the user an image.
            An IAssistant player asks a specialized IChat player for help.
            </example>
      <remarks>
            A player interaction is used to store an interaction between two players.
            The interaction and its result can be represented graphically as text or image in the console.
            The object in this property provide those graphical representations.
            Change this object to change the way the console shows the interactions.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlayerInteraction" />
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.UserPromptUI">
      <summary>
            User prompt interface
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.CurrentPlayer">
      <summary>
            Current selected player
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.LogPath">
      <summary>
            Log directory to save audio, images and other files generated by the AI players
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.CurrentConversationLog">
      <summary>
            Current conversation log with the messages exchanged between players
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IHelpConsole.Play">
      <summary>
            Interface to keep all players and elements together
            </summary>
      <example>
            An example of IPlay is the class ConsolePlay
            </example>
      <remarks>
            Objects implementing IPLay manage casts of players and its resources.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlay" />
      <seealso cref="T:AIAssistants.Data.ConsolePlay" />
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.UpdateAppServices">
      <summary>
            Update the application services list and assign them to the players
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.ShowActivityFeedback(System.String)">
      <summary>
            Show a message in the user prompt with background activity information.
            </summary>
      <param name="message">
            Message to show.
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.GetExtension(System.String)">
      <summary>
            Get a console extension by its name
            </summary>
      <param name="extensionname">
            Console extension name
            </param>
      <returns>
            IConsoleExtension object or null if not found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.ApplicationMessageAsync(AIAssistants.Interfaces.IPlayer,AIAssistants.Data.ContextMessage)">
      <summary>
            Add a message from the application to the chat
            </summary>
      <param name="application">
            Application sending the message
            </param>
      <param name="message">
            Application message
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.SendImageToUserAsync(AIAssistants.Interfaces.IPlayer,System.Drawing.Bitmap,System.String)">
      <summary>
            Add an image from the application to the chat
            </summary>
      <param name="application">
            Application sending the message
            </param>
      <param name="image">
            Bitmap image to show
            </param>
      <param name="message">
            Optional application message
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.SendMessageToPlayerAsync(AIAssistants.Interfaces.IAPIPlayer,AIAssistants.Data.ContextMessage)">
      <summary>
            Send a message to a player
            </summary>
      <param name="player">
            Player to receive the message
            </param>
      <param name="msg">
            Message to send
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.StopConversation">
      <summary>
            This function is used by assistant players to avoid infinite loops of courtesy responses.
            </summary>
      <returns>
            True if no problem found
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.SetListenerName(System.String)">
      <summary>
            Set the listener for the current player interaction, selected by its name
            </summary>
      <param name="listenername">
            Name of the new listener
            </param>
      <returns>
            True if succeeded
            </returns>
      <remarks>
            This function is intended to use throgh a player function call request.
            Players have a standardized set of console functions to interact with the console.
            Usually, the player response is addressed to the player that made the request.
            Players must know the list of participants in the conversation and their roles to make a good use of this function.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.AddPlayer(AIAssistants.Interfaces.IAPIPlayer,System.Boolean)">
      <summary>
            Add a player to the play
            </summary>
      <param name="player">
            New player to add
            </param>
      <param name="addtocast">
            Add player to cast too
            </param>
      <remarks>
            You can add players to the console dinamically, without need to create a play.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.RemovePlayer(AIAssistants.Interfaces.IAPIPlayer,System.Boolean)">
      <summary>
            Remove a player from the play
            </summary>
      <param name="player">
            Player to remove
            </param>
      <param name="removefromcast">
            Remove player from cast too
            </param>
      <remarks>
            You can remove players to the console dinamically, without need to have a play.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.AskUserForData(AIAssistants.Interfaces.IAPIUIDataSheet)">
      <summary>
            Ask the user for data when needed
            </summary>
      <param name="data">
            Generic data description sheet
            </param>
      <remarks>
            It is possible that some interactions require the user to provide some data.
            UIDataSheet objects are a standard way in this solution to edit unknown data structures.
            The console implementation will use the tools provided in the corresponding platform implementation (desktop, web, etc.) to show the data sheet editors to the user.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.AddAppMenuItems(System.Collections.Generic.List{AIAssistants.Interfaces.CommandMenuItem})">
      <summary>
            Update the application commands menu
            </summary>
      <param name="menuItems">
            List of application menu items
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.AddAssistantMenuItems(System.Collections.Generic.List{AIAssistants.Interfaces.CommandMenuItem})">
      <summary>
            Update the assistant commands menu
            </summary>
      <param name="menuItems">
            List of assistant menu items
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.AddForceToolSelection(System.Collections.Generic.List{AIAssistants.Data.ToolUI})">
      <summary>
            Add a list of tools for the user to force use in responses
            </summary>
      <param name="tools">
            List of allowed tools or null if none.
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.IHelpConsole.SetInitialLayout">
      <summary>
            Initialize the console layout with the default values
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.MenuCommandHandler">
      <summary>
            Delegate to handle console menu commands
            </summary>
      <param name="sender">
            Console object that raised the event
            </param>
      <param name="commandid">
            Command identifier
            </param>
      <param name="parameters">
            Serialized JSON string with parameter values.
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.CommandMenuItem">
      <summary>
            Console menu item descriptor
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CommandMenuItem.Identifier">
      <summary>
            Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CommandMenuItem.CommandName">
      <summary>
            Command name to show in the menu
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CommandMenuItem.CommandToolTipText">
      <summary>
            Command tooltip text
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CommandMenuItem.DefaultParameters">
      <summary>
            Parameter values by default for debugging purposes
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.CommandMenuItem.CommandHandler">
      <summary>
            Command handler
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.IImageGenerator">
      <summary>
            Interface to generate images
            </summary>
      <example>
            An example of an image generator is the DallEImageGenerator class in the OpenAIAPI project
            </example>
      <remarks>
            Players implementing this interface interact with the user to generate or modify images.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
      <seealso cref="T:AIAssistants.Interfaces.IModelUser" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:GlobalCommonEntities.DependencyInjection.ObjectWrapper" />
    </member>
    <member name="M:AIAssistants.Interfaces.IImageGenerator.GenerateImage(GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Generate images using the provided parameters
            </summary>
      <param name="imageInfo">
            Parameter data sheet
            </param>
      <returns>
            List of images wrapped in a generic object
            </returns>
      <remarks>
            Usually, the image creation is managed through the SendPrompt method in the IAPIPlayer interface.
            This method uses ContextMessage objects to manage the conversation.
            In the case of image generation, the ContextMessage returned objects have an image url in the MessageUrl property or a byte array in the Data property.
            To call this method, you need a valid image request wrapped in an ObjectWrapper object. SendPrompt manages this for you.
            </remarks>
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="!:IAPIPlayer.SendPrompt(IPlayer, ContextMessage)" />
    </member>
    <member name="M:AIAssistants.Interfaces.IImageGenerator.ModifyImage(GlobalCommonEntities.DependencyInjection.ObjectWrapper,GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Generate images from another image using the provided parameters
            </summary>
      <param name="imageInfo">
            Parameter data sheet
            </param>
      <param name="image">
            Data already generated
            </param>
      <returns>
            List of images wrapped in a generic object
            </returns>
      <remarks>
            Usually, the image creation is managed through the SendPrompt method in the IAPIPlayer interface.
            This method uses ContextMessage objects to manage the conversation.
            In the case of image modification, both the input ContextMessage and the ContextMessage returned objects have an image url in the MessageUrl property or a byte array in the Data property.
            To call this method, you need a valid image request wrapped in an ObjectWrapper object. SendPrompt manages this for you.
            Provide a text message to modify the image in the ContextMessage object.
            </remarks>
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="!:IAPIPlayer.SendPrompt(IPlayer, ContextMessage)" />
    </member>
    <member name="M:AIAssistants.Interfaces.IImageGenerator.ImageVariation(GlobalCommonEntities.DependencyInjection.ObjectWrapper,GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            Generate imagevariations of an image using the provided parameters
            </summary>
      <param name="imageInfo">
            Parameter data sheet
            </param>
      <param name="image">
            Data already generated
            </param>
      <returns>
            List of images wrapped in a generic object
            </returns>
      <remarks>
            Usually, the image creation is managed through the SendPrompt method in the IAPIPlayer interface.
            This method uses ContextMessage objects to manage the conversation.
            In the case of image modification, both the input ContextMessage and the ContextMessage returned objects have an image url in the MessageUrl property or a byte array in the Data property.
            To call this method, you need a valid image request wrapped in an ObjectWrapper object. SendPrompt manages this for you.
            Do not provide a text message in the ContextMessage object to create image variations. If you provide a text prompt, SendPrompt will call ModifyImage instead.
            </remarks>
      <seealso cref="T:AIAssistants.Data.ContextMessage" />
      <seealso cref="!:IAPIPlayer.SendPrompt(IPlayer, ContextMessage)" />
    </member>
    <member name="M:AIAssistants.Interfaces.IImageGenerator.GetImages(System.Collections.Generic.List{GlobalCommonEntities.DependencyInjection.ObjectWrapper})">
      <summary>
            Extract standard images from a warpped image object
            </summary>
      <param name="images">
            List of wrapped images
            </param>
      <returns>
            List of Data objects
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IPlay">
      <summary>
            Interface to manage multiple IAPIPlayers that can interact with each other
            </summary>
      <example>
            The ConsolePlay class is an example of a class that implements IPlay
            </example>
      <remarks>
            Players are organized in plays. A play is a group of players and its resources, configured to interact in a visual console.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIPlayer" />
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
      <seealso cref="T:AIAssistants.JSON.PlayPlayer" />
      <seealso cref="T:AIAssistants.JSON.CastElement" />
      <seealso cref="!:ConsolePlay" />
    </member>
    <member name="P:AIAssistants.Interfaces.IPlay.Presentation">
      <summary>
            This is a presentation message.
            </summary>
      <remarks>
            This mesage will be the first one for all players in the play.
            Its goal is to introuce all players to each other so they know their names, roles, and capabilities.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlay.User">
      <summary>
            User player configuration
            </summary>
      <remarks>
            The user has a special player configuration that is different from the rest of the players.
            Users just need a name and background and foreground colors.
            You can get a generic user player configuration from the APIManager GetUserPlayer method.
            You can have issues with the user role names in the different AI platforms.
            </remarks>
      <seealso cref="!:IAPIManager.GetUserPlayer()" />
    </member>
    <member name="P:AIAssistants.Interfaces.IPlay.Applications">
      <summary>
            List of application player configuration
            </summary>
      <remarks>
            Applications can act as users sending messages to AI agents.
            Applications can define custom roles for the players so they can decide to whom sending the messages.
            There is not mandatory to have an application player in the play.
            Responses to application messages should be managed be human users. Applications do not establish conversations with agents, for they aren't intelligent players.
            </remarks>
      <seealso cref="!:GetPlayerByRole(string)" />
    </member>
    <member name="P:AIAssistants.Interfaces.IPlay.DefaultPlayer">
      <summary>
            This is the default cast player to send prompts to when no specific player is selected.
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlay.AppAutomation">
      <summary>
            Application API services
            </summary>
      <remarks>
            This object rpresents the application services. In the case of this interface, it is used to provide IAPIManager objects to create players.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IPlay.Cast">
      <summary>
            Player list
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.ContainsPlayer(System.String)">
      <summary>
            Check for a player in the cast
            </summary>
      <param name="playerId">
            Player unique identifier
            </param>
      <returns>
            True if the player is in the cast
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetPlayerByID(System.String)">
      <summary>
            Find a player in the cast by its unique identifier
            </summary>
      <param name="playerId">
            Player unique identifier
            </param>
      <returns>
            Found player or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetPlayerByRole(System.String,System.Boolean)">
      <summary>
            Find players in the cast by its application role
            </summary>
      <param name="approle">
            Application role identifier
            </param>
      <param name="notbusy">
            Exclude busy players from the search
            </param>
      <returns>
            Found players or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetPlayerByName(System.String)">
      <summary>
            Find a player in the cast by its name
            </summary>
      <param name="playerName">
            Player name
            </param>
      <returns>
            Found player or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetAppByName(System.String)">
      <summary>
            Find an application by its name
            </summary>
      <param name="appName">
            Application name
            </param>
      <returns>
            Found application or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.UserPlayerByName(System.String)">
      <summary>
            Find an application or user by its name
            </summary>
      <param name="appName">
            Application or user name
            </param>
      <returns>
            Found application, user, or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetPlayerSchema(AIAssistants.Interfaces.IAPIPlayer)">
      <summary>
            Get the play schema for a given IAPIPlayer object
            </summary>
      <param name="player">
            Player to get the schema from
            </param>
      <returns>
            PlayPlayer object to serialize the player
            </returns>
      <remarks>
            PlayPlayer is the object that contains the player configuration to serialize it.
            </remarks>
      <seealso cref="T:AIAssistants.JSON.PlayPlayer" />
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetPlayerFromSchema(AIAssistants.JSON.PlayPlayer,AIAssistants.Interfaces.IAPIManager)">
      <summary>
            Make an IAPIPlayer object from a PlayPlayer schema object
            </summary>
      <param name="pp">
            PlayPlayer object to create the player from
            </param>
      <param name="apim">
            IAPIManager to create the player with
            </param>
      <returns>
            IAPIPlayer object created from the schema or null
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.GetCastElement(AIAssistants.Interfaces.IPlayerAsset)">
      <summary>
            Get the asset schema for a given IPlayerAsset object
            </summary>
      <param name="asset">
            Asset to get the schema from
            </param>
      <returns>
            CastElement object to serialize the asset
            </returns>
      <remarks>
            CastElement is the object that contains the asset configuration to serialize it.
            </remarks>
      <seealso cref="T:AIAssistants.JSON.CastElement" />
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.LoadFromStream(System.IO.Stream)">
      <summary>
            Create Play from a stream
            </summary>
      <param name="splay">
            Stream with the Play configuration
            </param>
      <remarks>
            The stream must contain a serialized PlaySchema object in Json format.
            </remarks>
    </member>
    <member name="M:AIAssistants.Interfaces.IPlay.LoadFromSchema(AIAssistants.JSON.PlaySchema)">
      <summary>
            Create Play from a schema object
            </summary>
      <param name="play">
            Object with the Play configuration
            </param>
      <remarks>
            PlaySchema is the object that contains the play configuration to serialize it.
            </remarks>
      <seealso cref="T:AIAssistants.JSON.PlaySchema" />
    </member>
    <member name="T:AIAssistants.Interfaces.PlaySpeechHandler">
      <summary>
            Delegate to reproduce speech
            </summary>
      <param name="speech">
            Speech data bytes
            </param>
    </member>
    <member name="T:AIAssistants.Interfaces.ISpeechManager">
      <summary>
            Interface to manage text to speech and speech to text
            </summary>
      <example>
            An example of a class implementing this interface is OpenAISpeech, in the OpenAIAPI project.
            </example>
      <remarks>
            This interface is used in player assets to transform or translate audio into text.
            The asset is used to convert text into audio and reproduce it in the help console.
            </remarks>
      <seealso cref="T:AIAssistants.Interfaces.IModelUser" />
      <seealso cref="T:AIAssistants.Interfaces.IPlayerAsset" />
      <seealso cref="T:AIAssistants.Interfaces.IAPIElement" />
    </member>
    <member name="P:AIAssistants.Interfaces.ISpeechManager.Cancel">
      <summary>
            Cancel the current operation
            </summary>
    </member>
    <member name="P:AIAssistants.Interfaces.ISpeechManager.AvailableVoices">
      <summary>
            List of available voices
            </summary>
    </member>
    <member name="M:AIAssistants.Interfaces.ISpeechManager.TextToSpeech(System.Collections.Generic.List{System.String},System.String,AIAssistants.Interfaces.PlaySpeechHandler)">
      <summary>
            Create speech from text and reproduce it
            </summary>
      <param name="text">
            Text to convert to speech
            </param>
      <param name="voice">
            Voice to use
            </param>
      <param name="speaker">
            Delegate to reproduce the audio
            </param>
    </member>
    <member name="M:AIAssistants.Interfaces.ISpeechManager.TextToSpeech(System.String,System.String)">
      <summary>
            Create speech from text
            </summary>
      <param name="text">
            Text to convert to speech
            </param>
      <param name="voice">
            Voice to use
            </param>
      <returns>
            Audio bytes
            </returns>
    </member>
    <member name="M:AIAssistants.Interfaces.ISpeechManager.SpeechToText(System.Byte[],System.Boolean)">
      <summary>
            Convert speech to text
            </summary>
      <param name="speech">
            Array of bytes with the audio data
            </param>
      <param name="translate">
            Translate or transcript the text
            </param>
      <returns>
            Text from audio
            </returns>
    </member>
    <member name="T:AIAssistants.Interfaces.IAIStandardObject">
      <summary>
            IStandardObject extension for AI objects
            </summary>
      <remarks>
            IStandardObject interface extension for objects using an AI model.
            </remarks>
    </member>
    <member name="P:AIAssistants.Interfaces.IAIStandardObject.StdModel">
      <summary>
            Genrative model name
            </summary>
    </member>
    <member name="T:AIAssistants.Interfaces.SingletonInstanceAttribute">
      <summary>
            Attribute to define the property used to instantiate a singleton class
            </summary>
      <example>
            The OpenAIAPIManager class uses this attribute to define the "Instance" property used to instantiate the singleton instance.
            </example>
      <remarks>
            Decorating a singleton class with this interface, you can use this information to instantiate it, instead of having to know it previously.
            </remarks>
    </member>
    <member name="T:AIAssistants.JSON.AppStructure">
      <summary>
            Represents the structure of an application
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppStructure.Name">
      <summary>
            Application name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppStructure.Description">
      <summary>
            Application description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppStructure.Platform">
      <summary>
            Description of the platform where the application is running
            </summary>
      <example>Windows, Mobile, Web, WPF</example>
    </member>
    <member name="P:AIAssistants.JSON.AppStructure.Type">
      <summary>
            Specific type of application
            </summary>
      <example>MDI WinForms, MVC, ASPX.NET, PHP</example>
    </member>
    <member name="P:AIAssistants.JSON.AppStructure.Root">
      <summary>
            Root / main element of the application
            </summary>
      <example>A Form, a Page, a View, etc.</example>
    </member>
    <member name="T:AIAssistants.JSON.AppElement">
      <summary>
            Application element
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Name">
      <summary>
            Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Description">
      <summary>
            Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Path">
      <summary>
            Path to the element from the root
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.GenericType">
      <summary>
            The generic type of the element
            </summary>
      <example>The element base class name</example>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.SpecificType">
      <summary>
            The specific type of the element
            </summary>
      <example>The element class name</example>
      <remarks>
            This is the type that can be found in the project documentation.
            Refer to the project documentation for more information and details.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.CurrentValue">
      <summary>
            Current value of the element
            </summary>
      <example>
            The text in a texbox
            The status of a checkbox
            The selected value in a list box or combo box
            </example>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Values">
      <summary>
            List of values for multi-value elements
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Position">
      <summary>
            The relative position of the element in it parent
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Enabled">
      <summary>
            The status of the current element
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Visible">
      <summary>
            The visibility of the current element
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Children">
      <summary>
            Child elements of the current element
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.PathsToRelevantChildren">
      <summary>
            Pre-calculated paths to relevant child elements
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppElement.Instance">
      <summary>
            Element instance. For internal use only.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.ElementPosition">
      <summary>
            Element rectangle position
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.ElementValue">
      <summary>
            Element value
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ElementValue.BoolValue">
      <summary>
            The value of the element if boolean
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ElementValue.DateTimeValue">
      <summary>
            The value of the element if date and time
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ElementValue.StringValue">
      <summary>
            The value of the element if string
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ElementValue.ObjectValue">
      <summary>
            The value of the element if application element
            </summary>
      <example>
            Used to represent generic objects as application elements.
            An example can be a list box item, a combo box item, etc.
            </example>
    </member>
    <member name="P:AIAssistants.JSON.ElementValue.NumberValue">
      <summary>
            The value of the element if number
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ElementValue.ValueProperty">
      <summary>
            Access to the property that contains the value. For internal use only.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PathToRelevantChild">
      <summary>
            Pre-calculated path to a relevant child element
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PathToRelevantChild.Name">
      <summary>
            Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PathToRelevantChild.Description">
      <summary>
            Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PathToRelevantChild.Type">
      <summary>
            Element type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PathToRelevantChild.Path">
      <summary>
            Path from the root to the child
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.ContactAddress">
      <summary>
            Address of a human contact for assistants to interact with using external applications
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ContactAddress.ApplicationName">
      <summary>
            Name of the application that will interact with the contact
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ContactAddress.ContactId">
      <summary>
            Unique identifier of the contact in the external application (name, id, etc.)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ContactAddress.Address">
      <summary>
            Address of the contact in the external application (mail, phone, etc.)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ContactAddress.Priority">
      <summary>
            Priority of the contact address
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.ContactAddressList">
      <summary>
            List of addresses for assistants to interact with human contacts
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ContactAddressList.Contacts">
      <summary>
            List of contact addresses
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.ContactAddressList.GetContactForApp(System.String)">
      <summary>
            Get the contact addresses for a specific application
            </summary>
      <param name="appId">
            Application identifier
            </param>
      <returns>
            List of contact addresses for the application
            </returns>
    </member>
    <member name="T:AIAssistants.JSON.AISolution">
      <summary>
            Represents the entire solution structure for documentation.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.SolutionName">
      <summary>
            Name of the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.Description">
      <summary>
            Description of the solution and its objectives.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.Objectives">
      <summary>
            List of high-level objectives for the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.Architecture">
      <summary>
            Architecture details of the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.ExampleProjects">
      <summary>
            Example projects within the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.ConfigurationFormat">
      <summary>
            Configuration format used in the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolution.TypicalDevelopments">
      <summary>
            Typical developments or scenarios for the solution.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.Architecture">
      <summary>
            Represents the architecture of the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.Architecture.Modularity">
      <summary>
            Description of the modularity of the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.Architecture.CoreLibrary">
      <summary>
            Core library details.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.Architecture.PlatformLibraries">
      <summary>
            Libraries for specific platforms.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.Architecture.ServiceLibraries">
      <summary>
            Service libraries that add functionalities.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.Architecture.ProviderImplementationLibraries">
      <summary>
            Libraries for implementing assistants from different providers.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.AISolutionLibrary">
      <summary>
            Represents a library used in the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolutionLibrary.Name">
      <summary>
            Name of the library.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolutionLibrary.Purpose">
      <summary>
            Purpose of the library.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.AISolutionProject">
      <summary>
            Represents a project within the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolutionProject.Name">
      <summary>
            Name of the project.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AISolutionProject.Description">
      <summary>
            Description of the project.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.TypicalDevelopment">
      <summary>
            Represents a typical development scenario for the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypicalDevelopment.Description">
      <summary>
            Description of the development scenario.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypicalDevelopment.RequiredSteps">
      <summary>
            Required steps to achieve the development.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.GeneralDocumentation">
      <summary>
            Represents the general documentation for the main abstractions of the solution.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.TypeMapping">
      <summary>
            Mapping between data types and entity names.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.EntityMapping">
      <summary>
            Mapping between entity names and data types.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.Entities">
      <summary>
            Directory of main entities in the solution, indexed by entity name.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.SelectedEntity">
      <summary>
            Property to manage entity selection
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.Processes">
      <summary>
            Directory of relevant interactions and processes, indexed by interaction name.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.SelectedInteraction">
      <summary>
            Selected solution process for edition.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.Concepts">
      <summary>
            Directory of relevant solution concepts, indexed by process title.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.SelectedConcept">
      <summary>
            Selected solution process for edition.
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RefreshEntity">
      <summary>
            Refresh the selected entity in the user interface
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RefreshConcept">
      <summary>
            Refresh the selected process in the user interface
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RefreshInteraction">
      <summary>
            Refresh the selected interaction in the user interface
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.NewEntity">
      <summary>
            Create a new uninitialized entity
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RemoveEntity">
      <summary>
            Removes the current selected entity
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.NewConcept">
      <summary>
            Create a new uninitialized process
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RemoveConcept">
      <summary>
            Removes the current selected process
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.NewInteraction">
      <summary>
            Create a new uninitialized process
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RemoveInteraction">
      <summary>
            Removes the current selected process
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.GeneralDocumentation.Title">
      <summary>
            ISelectionObjectProvider: Title for the selection user interface
            </summary>
    </member>
    <member name="E:AIAssistants.JSON.GeneralDocumentation.SelectionUIInvoked">
      <summary>
            ISelectionObjectProvider: Event to notify that the user wants to select an object
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.ReleaseEvent">
      <summary>
            ISelectionObjectProvider: Release SelectObjectsHandler event subscriptions
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.HasMore(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Check if there are more objects to select from
            </summary>
      <param name="property">
            Property editor invoking the selection
            </param>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.GetSelectionObjects(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Get a list of objects to select from
            </summary>
      <returns>
            List of objects
            </returns>
      <param name="property">
            Property to get the object
            </param>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.GetSelectedObjects(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Get a list of objects already selected
            </summary>
      <returns>
            List of objects
            </returns>
      <param name="property">
            Property to get the object list
            </param>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.SetSelection(System.Collections.Generic.List{System.Object},GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Set the list of selected objects
            </summary>
      <param name="objects">
            Selected object list
            </param>
      <param name="property">
            Property to set the selection
            </param>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RemoveSelection(System.Collections.Generic.List{System.Object},GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Remove a list of objects
            </summary>
      <param name="objects">
            Object to remove list
            </param>
      <param name="property">
            Property to remove the selection
            </param>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.RemoveContainer(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Remove the object container
            </summary>
      <param name="property">
            Property editor invoking the selection
            </param>
    </member>
    <member name="M:AIAssistants.JSON.GeneralDocumentation.InvokeAction(System.Object,GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            ISelectionObjectProvider: Fire event to select an object
            </summary>
      <param name="sender">
            Object invoking the selection
            </param>
      <param name="property">
            Property editor invoking the selection
            </param>
    </member>
    <member name="T:AIAssistants.JSON.DocTypeInfo">
      <summary>
            Item to select data types
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.DocTypeInfo.DType">
      <summary>
            Data type name
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.AIEntity">
      <summary>
            Represents an AI entity for documentation.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.ChildDataSheets">
      <summary>
            List of child data sheets
            </summary>
      <seealso cref="!:Parent" />
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Name">
      <summary>
            Entity name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.GenericType">
      <summary>
            Entity generic type (class, interface, etc.)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.DataType">
      <summary>
            Entity data type (specific class, interface, etc.)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.DTInfo">
      <summary>
            Editable property for data type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Description">
      <summary>
            Entity description and use
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Descendants">
      <summary>
            Entities based in this entity
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Descendant">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Components">
      <summary>
            Entities that form part of this entity
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Component">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.AIProject">
      <summary>
            Project where the entity is declared
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.AILibrary">
      <summary>
            Library where the entity is declared
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.RelevantRelationships">
      <summary>
            Relationships with other entities worth of mention
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.RelevantRelationship">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.Interactions">
      <summary>
            List of names of interactions with other entities
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.SelectedInteraction">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.RelatedConcepts">
      <summary>
            List of titles of related concepts
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AIEntity.SelectedConcept">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.InvokeAction(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            Invoke UI interface to select objets to add or remove
            </summary>
      <param name="property">
            Invoker property editor information
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.SetMethodParameterTypes(System.String,GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            This method is called by PropertyEditorInfo to resolve the parameter structure for a given method
            </summary>
      <param name="methodName">
            Method name to resolve
            </param>
      <param name="pinfo">
            PropertyEditorInfo object to configure
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.RenameEntityLinks(System.String,System.String)">
      <summary>
            Update entity names when a name has changed
            </summary>
      <param name="oldname">
            Old entity name
            </param>
      <param name="newname">
            New entity name
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.RenameConceptLinks(System.String,System.String)">
      <summary>
            Update process titles when a title has changed
            </summary>
      <param name="oldname">
            Old process title
            </param>
      <param name="newname">
            New process title
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.RenameInteractionLinks(System.String,System.String)">
      <summary>
            Update interaction titles when a title has changed
            </summary>
      <param name="oldname">
            Old interaction title
            </param>
      <param name="newname">
            New interaction title
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.NewRelation">
      <summary>
            Create a new relation between entities
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.AIEntity.RemoveRelation">
      <summary>
            Remove a relation between entities
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.EntityRelation">
      <summary>
            Defines a relevant relation between entities.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntityRelation.Name">
      <summary>
            Name of the relation
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntityRelation.Description">
      <summary>
            Description of the relation
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntityRelation.RelationType">
      <summary>
            GenericType of relation (creator, user, etc.)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntityRelation.RelatedEntities">
      <summary>
            Related entity names
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntityRelation.RelatedEntity">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.EntityRelation.InvokeAction(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            Invoke UI interface to select objets to add or remove
            </summary>
      <param name="property">
            Invoker property editor information
            </param>
    </member>
    <member name="T:AIAssistants.JSON.EntitiesInteraction">
      <summary>
            Represents an interaction or process involving multiple entities and steps.
            </summary>
      <example>
            Examples of interactions are:
            - Implmentation of a feature
            - Collaboration between entities
            - Data flow between entities
            - Creation of a new entity as a multi-point process
            - etc.
            </example>
    </member>
    <member name="P:AIAssistants.JSON.EntitiesInteraction.ChildDataSheets">
      <summary>
            List of child data sheets
            </summary>
      <seealso cref="!:Parent" />
    </member>
    <member name="P:AIAssistants.JSON.EntitiesInteraction.Title">
      <summary>
            Interaction name or title
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntitiesInteraction.Description">
      <summary>
            Interaction description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntitiesInteraction.Steps">
      <summary>
            Interaction steps
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.EntitiesInteraction.SelectedStep">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.EntitiesInteraction.NewStep">
      <summary>
            Create a new point in the process explanation
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.EntitiesInteraction.RemoveStep">
      <summary>
            Remove a point from the process explanation
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.EntitiesInteraction.RenameEntityLinks(System.String,System.String)">
      <summary>
            Update entity names when a name has changed
            </summary>
      <param name="oldname">
            Old entity name
            </param>
      <param name="newname">
            New entity name
            </param>
    </member>
    <member name="M:AIAssistants.JSON.EntitiesInteraction.RenameConceptLinks(System.String,System.String)">
      <summary>
            Update process titles when a title has changed
            </summary>
      <param name="oldname">
            Old process title
            </param>
      <param name="newname">
            New process title
            </param>
    </member>
    <member name="T:AIAssistants.JSON.InteractionStep">
      <summary>
            Represents a point in an interaction between entities.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.Condition">
      <summary>
            Condition to execute the point, if any.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.Description">
      <summary>
            Action to perform in the point
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.SampleCode">
      <summary>
            Sample code if needed
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.Steps">
      <summary>
            Provides high granularity point details when needed
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.SelectedStep">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.RelatedEntities">
      <summary>
            List of related entity names for this point
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.SelectedEntity">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.RelatedConcepts">
      <summary>
            List of titles of related concepts
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.InteractionStep.SelectedConcept">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.InteractionStep.NewStep">
      <summary>
            Create a new point in the process explanation
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.InteractionStep.RemoveStep">
      <summary>
            Remove a point from the process explanation
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.InteractionStep.InvokeAction(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            Invoke UI interface to select objets to add or remove
            </summary>
      <param name="property">
            Invoker property editor information
            </param>
    </member>
    <member name="M:AIAssistants.JSON.InteractionStep.RenameEntityLinks(System.String,System.String)">
      <summary>
            Update entity names when a name has changed
            </summary>
      <param name="oldname">
            Old entity name
            </param>
      <param name="newname">
            New entity name
            </param>
    </member>
    <member name="M:AIAssistants.JSON.InteractionStep.RenameConceptLinks(System.String,System.String)">
      <summary>
            Update process titles when a title has changed
            </summary>
      <param name="oldname">
            Old process title
            </param>
      <param name="newname">
            New process title
            </param>
    </member>
    <member name="T:AIAssistants.JSON.SolutionConcept">
      <summary>
            Represents an explanation of a complex solution process.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.SolutionConcept.ChildDataSheets">
      <summary>
            List of child data sheets
            </summary>
      <seealso cref="!:Parent" />
    </member>
    <member name="P:AIAssistants.JSON.SolutionConcept.Title">
      <summary>
            Title of the process
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.SolutionConcept.Introduction">
      <summary>
            Introduction to the process
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.SolutionConcept.Points">
      <summary>
            List of points to explain the process
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.SolutionConcept.SelectedPoint">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.SolutionConcept.NewPoint">
      <summary>
            Create a new point in the process explanation
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.SolutionConcept.RemovePoint">
      <summary>
            Remove a point from the process explanation
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.SolutionConcept.RenameEntityLinks(System.String,System.String)">
      <summary>
            Update entity names when a name has changed
            </summary>
      <param name="oldname">
            Old entity name
            </param>
      <param name="newname">
            New entity name
            </param>
    </member>
    <member name="M:AIAssistants.JSON.SolutionConcept.RenameInteractionLinks(System.String,System.String)">
      <summary>
            Update interaction titles when a title has changed
            </summary>
      <param name="oldname">
            Old interaction title
            </param>
      <param name="newname">
            New interaction title
            </param>
    </member>
    <member name="T:AIAssistants.JSON.ConceptPoint">
      <summary>
            Represents a point in a process explanation.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.Number">
      <summary>
            Point number
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.Text">
      <summary>
            Text to expose the point
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.SampleCode">
      <summary>
            Sample code when needed
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.RelatedProcesses">
      <summary>
            List of related processes and examples
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.SelectedInteraction">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.RelatedEntities">
      <summary>
            List of related entity names for this point
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ConceptPoint.SelectedEntity">
      <summary>
            Property needed for edition purposes
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.ConceptPoint.InvokeAction(GlobalCommonEntities.UI.PropertyEditorInfo)">
      <summary>
            Invoke UI interface to select objets to add or remove
            </summary>
      <param name="property">
            Invoker property editor information
            </param>
    </member>
    <member name="M:AIAssistants.JSON.ConceptPoint.RenameEntityLinks(System.String,System.String)">
      <summary>
            Update entity names when a name has changed
            </summary>
      <param name="oldname">
            Old entity name
            </param>
      <param name="newname">
            New entity name
            </param>
    </member>
    <member name="M:AIAssistants.JSON.ConceptPoint.RenameInteractionLinks(System.String,System.String)">
      <summary>
            Update interaction titles when a title has changed
            </summary>
      <param name="oldname">
            Old interaction title
            </param>
      <param name="newname">
            New interaction title
            </param>
    </member>
    <member name="T:AIAssistants.JSON.APIManagerCfg">
      <summary>
            API manager type configuration
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.APIManagerCfg.Type">
      <summary>
            GenericType full name with assembly
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.APIManagerCfg.Name">
      <summary>
            API manager name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.APIManagerCfg.Description">
      <summary>
            API manager description
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.APIManagerList">
      <summary>
            API Manager list
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.APIManagerList.Managers">
      <summary>
            List of API managers
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.APIManagerList.GetAPIManager(System.Type,System.String,System.String)">
      <summary>
            Get an IAPIManager by type
            </summary>
      <param name="type">
            IAPIManager class type
            </param>
      <param name="configpath">
            Configuration directory path
            </param>
      <param name="logpath">
            Log directory path
            </param>
      <returns>
            IAPIManager instance or null
            </returns>
    </member>
    <member name="T:AIAssistants.JSON.ApplicationDocument">
      <summary>
            Generic base class to store application documents
            </summary>
      <descendant>HtmlParser</descendant>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.DocumentId">
      <summary>
            Document unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.DocumentName">
      <summary>
            Document name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.MimeType">
      <summary>
            Document MIME type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.Created">
      <summary>
            Document creation date
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.Version">
      <summary>
            Document version number     
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.Owner">
      <summary>
            Document owner
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.Status">
      <summary>
            Document status
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.Purpose">
      <summary>
            Document purpose
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.Origin">
      <summary>
            Document origin (url, path, class, ect.)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.DocumentContent">
      <summary>
            Document content
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ApplicationDocument.DataSheet">
      <summary>
            Add user interface property edition to the document
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.UpdateDocument(System.Object)">
      <summary>
            Update a document
            </summary>
      <param name="content">
            New document content
            </param>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.RefreshDocumentAsync">
      <summary>
            Reload the document content if null
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.RefreshDocument">
      <summary>
            Reload the document content if null
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.DeleteDocument">
      <summary>
            Remove the document content
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.GetAsTextAsync">
      <summary>
            Get the document content as a string
            </summary>
      <returns>
            String representing the document content
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.GetAsText">
      <summary>
            Get the document content as a string
            </summary>
      <returns>
            String representing the document content
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.GetAsBytesAsync">
      <summary>
            Get the document content as a Base64 codified byte array
            </summary>
      <returns>
            String representing the binary document content
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.WriteDocumentAsync(System.String)">
      <summary>
            Write the document content to a file
            </summary>
      <param name="path">
            File path
            </param>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.StoreDocument(System.Object,System.String,System.String)">
      <summary>
            Store a document
            </summary>
      <param name="content">
            Undefined type content
            </param>
      <param name="name">
            Document name
            </param>
      <param name="type">
            Document mime type
            </param>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.CallFunction(AIAssistants.Interfaces.IAPIPlayer,AIAssistants.JSON.FunctionBatch)">
      <summary>
            Make a call to a function for this document
            </summary>
      <param name="caller">
            Function caller
            </param>
      <param name="calls">
            Block of function calls
            </param>
      <returns>
            FunctionBatch with the call results
            </returns>
      <remarks>
            Use this method to call service functions acting on documents of this type.
            Documents must return null if they do not manage the function call.
            Derived classes can implement custom functions to handle the call.
            </remarks>
    </member>
    <member name="M:AIAssistants.JSON.ApplicationDocument.ProcessGetAsText">
      <summary>
            GetAsText(Async) shared body
            </summary>
      <returns>
            Document content as string
            </returns>
    </member>
    <member name="T:AIAssistants.JSON.DocListItem">
      <summary>
            Auxiliary class for document list items
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.AppDocumentRepository">
      <summary>
            Central document repository for the application
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.RepositoryPath">
      <summary>
            Path to save the repository information as a json file
            </summary>
      <remarks>
            Document content is not serialized
            </remarks>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.FindDocumentById(System.String)">
      <summary>
            Find a given document by its unique identifier
            </summary>
      <param name="id">
            Document unique identifier
            </param>
      <returns>
            Document found or null
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.FindDocumentByName(System.String,System.String)">
      <summary>
            Find one or more documents by name and/or type
            </summary>
      <param name="name">
            Document name. Can be null
            </param>
      <param name="type">
            Document MIME type. Can be null
            </param>
      <returns>
            List of found documents
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.FindDocumentByOriginTypeOwner(System.String,System.String,System.String)">
      <summary>
            Find one or more documents by origin and/or type and/or owner
            </summary>
      <param name="origin">
            Document origin. Can be null
            </param>
      <param name="type">
            Document MIME type. Can be null
            </param>
      <param name="owner">
            Document owner. Can be null
            </param>
      <returns>
            List of found documents
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.RemoveDocuments(System.String,System.String,System.Boolean)">
      <summary>
            Remove documents by status and owner
            </summary>
      <param name="status">
            Document status
            </param>
      <param name="owner">
            Document owner
            </param>
      <param name="delete">
            Delete the document or just remove it from the repository
            </param>
      <returns>
            Document removed count
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.SaveRepository">
      <summary>
            Save repository to a json file
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.LoadRepository">
      <summary>
            Load repository from a json file
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.CallFunction(System.String,AIAssistants.Interfaces.IAPIPlayer,AIAssistants.JSON.FunctionBatch)">
      <summary>
            Make a call to a function
            </summary>
      <param name="docid">
            Document unique identifier
            </param>
      <param name="caller">
            Function caller
            </param>
      <param name="calls">
            Block of function calls
            </param>
      <returns>
            FunctionBatch with the call results
            </returns>
      <remarks>
            Use this method to call service functions in the document type.
            Documents must return null if they do not manage the function call.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.StdUID">
      <summary>
            IStandardObject: Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.StdName">
      <summary>
            IStandardObject: Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.StdDescription">
      <summary>
            IStandardObject: Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.DataSheet">
      <summary>
            IStandardObject: Information to edit the object
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.SaveToStream(System.IO.Stream,System.Boolean)">
      <summary>
            IStreamReadWriter: Save the element to a stream
            </summary>
      <param name="stream">
            Target Stream
            </param>
      <param name="formatted">
            Save formatted data
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.LoadFromStream(System.IO.Stream)">
      <summary>
            IStreamReadWriter: Load the element from a stream
            </summary>
      <param name="stream">
            Source Stream
            </param>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.EnableLog">
      <summary>
            IAppAutomationExtension: Enable or disable logging if the extension has a log file
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.AppDocumentRepository.AppAutomation">
      <summary>
            IAppAutomationExtension: Application automation interface
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.GetServices(AIAssistants.Interfaces.IAppAutomation)">
      <summary>
            IAppAutomationExtension: List of extension automation services
            </summary>
      <param name="owner">
            Main IAppAutomation object (represents the application)
            </param>
    </member>
    <member name="M:AIAssistants.JSON.AppDocumentRepository.CallFunction(AIAssistants.Interfaces.IPlayer,AIAssistants.JSON.FunctionBatch)">
      <summary>
            IAppAutomationExtension: Make a call to a function
            </summary>
      <param name="caller">
            Function caller
            </param>
      <param name="calls">
            Block of function calls
            </param>
      <returns>
            FunctionBatch with the call results
            </returns>
      <remarks>
            Use this method to call service functions in the extension.
            Extensions must return null if they do not manage the function call.
            </remarks>
    </member>
    <member name="T:AIAssistants.JSON.FunctionCallCfg">
      <summary>
            This class allows interacting with the user interface to configure functions and its parameters.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.Identifier">
      <summary>
            IAPIElement: Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.Name">
      <summary>
            IAPIElement: Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.Description">
      <summary>
            IAPIElement: Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.GenericType">
      <summary>
            IAPIElement: Element generic type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.Capabilities">
      <summary>
            IAPIElement: Element capabilities
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.APIManager">
      <summary>
            IAPIElement: API manager object
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.EditorInfo">
      <summary>
            IAPIElement: Information to edit the object
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.ConfigInfo">
      <summary>
            IAPIElement: Information to edit the object configuration
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionCallCfg.Usage">
      <summary>
            IAPIElement: Usage information of this element after the current request.
            </summary>
      <remarks>
            This is a dictionary with information useful to billing and limits.
            Each dictionary key is the name of anusage element field, such as input tokens, audio tokens, etc.
            Keys can be names of composite properties, such as "input_token_details.text_tokens".
            </remarks>
    </member>
    <member name="M:AIAssistants.JSON.FunctionCallCfg.QueryExtraArgs(System.String)">
      <summary>
            IAPIElement: Query for function extra arguments
            </summary>
      <param name="functionName">
            Name of the function
            </param>
      <returns>
            List of extra arguments
            </returns>
    </member>
    <member name="M:AIAssistants.JSON.FunctionCallCfg.UpdateConfiguration(AIAssistants.Interfaces.IAPIElement)">
      <summary>
            IAPIElement: Update the element configuration
            </summary>
      <param name="fromElement">
            IAPIelement needed to update the configuration
            </param>
    </member>
    <member name="M:AIAssistants.JSON.FunctionCallCfg.UpdateObject(GlobalCommonEntities.DependencyInjection.ObjectWrapper)">
      <summary>
            IAPIElement: Update the element properties (exposed in the EditorInfo property)  in the provider server
            </summary>
      <param name="odata">
            Custom object information contained in an ObjectWrapper object
            </param>
    </member>
    <member name="M:AIAssistants.JSON.FunctionCallCfg.SetConfig(GlobalCommonEntities.Interfaces.IUIDataSheet)">
      <summary>
            IReconfigurableAPIElement: Set a new element configuration
            </summary>
      <param name="config">
            New configurarion data sheet
            </param>
    </member>
    <member name="T:AIAssistants.JSON.FunctionDef">
      <summary>
            JSON schema for function prototype definition.
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.FunctionDef.#ctor(AIAssistants.JSON.FunctionDef)">
      <summary>
            Constructor to get a copy of the object with a decontextualized name
            </summary>
      <param name="copy">
      </param>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.Properties">
      <inheritdoc />
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.AsJson">
      <inheritdoc />
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.ChildDataSheets">
      <summary>
            List of child data sheets
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.Name">
      <summary>
            The name of the function to be called.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.Description">
      <summary>
            A description of what the function does, used by the model to determine when and how to call the function.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.DisplayName">
      <summary>
            Display name for the function in the user interface.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.AllowUserCalling">
      <summary>
            Show this function in the console assistant menu to allow user call it too.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.Strict">
      <summary>
            Whether to enable strict schema adherence when generating the function call.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionDef.Parameters">
      <summary>
            The parameters the function accepts, described as a JSON Schema object.
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.FunctionDef.Copy">
      <inheritdoc />
    </member>
    <member name="M:AIAssistants.JSON.FunctionDef.HasPrefix">
      <summary>
            Check whether the function name has a prefix (a service identifier).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:AIAssistants.JSON.FunctionDef.CleanCopy">
      <summary>
            Get a copy of the object without non-standard properties
            </summary>
      <returns>
            Standardized FunctionDef object
            </returns>
    </member>
    <member name="T:AIAssistants.JSON.FunctionParameters">
      <summary>
            Represents a JSON Schema object for defining parameters in an OpenAI API function.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionParameters.NeedsFeedback">
      <summary>
            Subscribe to events to get feedback
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionParameters.Type">
      <summary>
            The type of the parameter block, such as "object", "array", "string", etc.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionParameters.ParamProperties">
      <summary>
            The properties of the parameter if it is of type "object".
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionParameters.AdditionalProperties">
      <summary>
            Allow additional properties
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionParameters.Required">
      <summary>
            List of required parameters
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionParameters.MandatoryParameters">
      <summary>
            Count of mandatory parameters
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.FunctionParameters.Copy">
      <summary>
            Create a copy of this object
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:AIAssistants.JSON.FunctionParameters.NewParameter">
      <summary>
            Add a new parameter to dictionary
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.ParameterItem">
      <summary>
            Description of a parameter in a function call.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.Type">
      <summary>
            The type of the parameter, such as "object", "array", "string", etc.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.Description">
      <summary>
            Parameter description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.Enum">
      <summary>
            The enumeration values for the parameter if applicable.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.Items">
      <summary>
            Array items if the parameter is of type "array".
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.MinItems">
      <summary>
            Minimum item quantity in the array
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.MaxItems">
      <summary>
            Maximum item quantity in the array
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.Properties">
      <summary>
            Nested objects if the parameter is of type "object".
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.Required">
      <summary>
            List of required parameters of nested objects.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.ParameterItem.AdditionalProperties">
      <summary>
            Whether to allow additional properties in nested objects.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.FunctionBatchItem">
      <summary>
            Item for a group of parallel function calls.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.id">
      <summary>
            Function call identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.UserId">
      <summary>
            User identifier in multi-user applications.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.FunctionName">
      <summary>
            Name of the function
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.Parameters">
      <summary>
            Json object with the function parameters as string
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.Response">
      <summary>
            Response to fill with the call results
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.ConnectionNumber">
      <summary>
            Connection index to use for this function call.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.InstanceWorkItems">
      <summary>
            Instances of application and services can store here temporal working data private to this call.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatchItem.OrderIndex">
      <summary>
            Use this number to order the function calls in the batch when needed.
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.FunctionBatchItem.CompareTo(AIAssistants.JSON.FunctionBatchItem)">
      <summary>
            Compare two function calls by their order index
            </summary>
      <param name="other">Other function call</param>
      <returns>Comparison result</returns>
    </member>
    <member name="T:AIAssistants.JSON.FunctionBatch">
      <summary>
            Block of pararllel function calls
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatch.CallerName">
      <summary>
            Caller name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatch.Identifier">
      <summary>
            Block identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatch.Calls">
      <summary>
            List of function calls
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionBatch.AppData">
      <summary>
            Application dependant extra data to be used in function calls.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.TypeListJsonConverter">
      <summary>
            Custom converter for handling "type" field that can be an array with multiple types including null.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.FunctionResponse">
      <summary>
            Information about the return value of an application function call
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionResponse.NeedsInteraction">
      <summary>
            The caller must continue the conversation using the results
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionResponse.ChainedCall">
      <summary>
            Return the call result as information in a multi-step process
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionResponse.Message">
      <summary>
            Message to force the assistant to interact using the result information
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.FunctionResponse.Result">
      <summary>
            Call result data
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.JsonSchemaDefinition">
      <summary>
            Generic definition for a JSON Schema, with name and description.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.JsonSchemaDefinition.AutomationName">
      <summary>
            The name of the automation that this schema is associated with.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.JsonSchemaDefinition.AutomatioStep">
      <summary>
            The step number in the automation that this schema is associated with.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.JsonSchemaDefinition.AutomationFile">
      <summary>
            File with data to be used in the automation, if applicable.
            </summary>
      <example>
            An Excel or csv file containing data to be processed by the automation for each row.
            A zip file containing multiple files to be processed by the automation, one by one or at once.
            </example>
      <remarks>
            The automation process will be applied to each item in this file.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.JsonSchemaDefinition.Description">
      <summary>
            A description of what the schema is for.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.JsonSchemaDefinition.Name">
      <summary>
            The name of the schema format.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.JsonSchemaDefinition.Schema">
      <summary>
            The schema, described as a JSON Schema object.
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.CastElement">
      <summary>
            Play cast element configuration for player assets.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.StdUID">
      <summary>
            IStandardObject: Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.StdName">
      <summary>
            IStandardObject: Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.StdDescription">
      <summary>
            IStandardObject: Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.DataSheet">
      <summary>
            IStandardObject: Information to edit the object
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.Id">
      <summary>
            Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.Name">
      <summary>
            Asset name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.Type">
      <summary>
            Interface type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.CastElement.API">
      <summary>
            API Manager identifier
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.APIRef">
      <summary>
            API manager reference to instantiate the proper API manager class for the player.
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.APIRef.Id">
      <summary>
            Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.APIRef.Type">
      <summary>
            API Manager class type
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PlayPlayer">
      <summary>
            Player configuration
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.StdUID">
      <summary>
            IStandardObject: Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.StdName">
      <summary>
            IStandardObject: Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.StdDescription">
      <summary>
            IStandardObject: Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.DataSheet">
      <summary>
            IStandardObject: Information to edit the object
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Id">
      <summary>
            Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Name">
      <summary>
            Player name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Type">
      <summary>
            Interface type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Instructions">
      <summary>
            Initial instructions for the player to understand its role in the play
            </summary>
      <remarks>
            You can use a file instead of a string by using the file: prefix.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.RemindMessge">
      <summary>
            Message that will be sent on each request to remind the player important things
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.BackColor">
      <summary>
            Player header background color
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.ForeColor">
      <summary>
            Player header foreground color
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Default">
      <summary>
            Default Player
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Services">
      <summary>
            List of application services allowed for the player
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.AppRoles">
      <summary>
            Application specific roles
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.API">
      <summary>
            API Manager identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayPlayer.Assets">
      <summary>
            List of Player Assets, like voice or image generators
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PlayUser">
      <summary>
            Play default user configuration
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayUser.Name">
      <summary>
            Interface type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayUser.BackColor">
      <summary>
            Player header background color
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayUser.ForeColor">
      <summary>
            Player header foreground color
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PlaySchema">
      <summary>
            Play definition
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.StdUID">
      <summary>
            IStandardObject: Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.StdName">
      <summary>
            IStandardObject: Element name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.StdDescription">
      <summary>
            IStandardObject: Element description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.DataSheet">
      <summary>
            IStandardObject: Information to edit the object
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.AppAutomation">
      <summary>
            Application automation manager
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.Id">
      <summary>
            Unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.Name">
      <summary>
            Play name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.Description">
      <summary>
            Play description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.Presentation">
      <summary>
            Players introuction message
            </summary>
      <remarks>
            You can use a file instead of a string by using the file: prefix.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.User">
      <summary>
            User configuration
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.Applications">
      <summary>
            Application configuration
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlaySchema.Players">
      <summary>
            List of Players
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PlayCollection">
      <summary>
            Collection of plays
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.PlayCollection.Plays">
      <summary>
            List of plays
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PlayIdentifierChangedEventArgs">
      <summary>
            Event arguments to notify play identifier change
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.PlayIdentifierChangedEventHandler">
      <summary>
            Delegate for play identifier change event
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="T:AIAssistants.JSON.QuestionAnsewr">
      <summary>
            Question and answer for documentation
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.QuestionAnsewr.Question">
      <summary>
            Question
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.QuestionAnsewr.Answer">
      <summary>
            Answer to the question
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.QuestionAnswerList">
      <summary>
            Collection of questions and answers
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.QuestionAnswerList.Messages">
      <summary>
            List of questions and answers
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.RelationType">
      <summary>
            Relation types for documentation
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.TypeKindName">
      <summary>
            Differentiation between types
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.TypeRelation">
      <summary>
            Definition of a type relation
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.Kind">
      <summary>
            Type kind
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.Type">
      <summary>
            Type of relation
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedTypeName">
      <summary>
            Related type name (B in A is a B)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedTypeProject">
      <summary>
            Related type full name (including assembly)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedTypeDocument">
      <summary>
            Related type file name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedTypeDescription">
      <summary>
            Related type description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.TypeMember">
      <summary>
            Type member (property, method, etc.)
            </summary>
      <remarks>
            Use this property to store the name of a property or method of 'this' type that is related to the related type.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.MemberParameter">
      <summary>
            Member parameter (if the type member is a method)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.MemberDescription">
      <summary>
            Member description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.MemberParameterDescription">
      <summary>
            Member parameter description (if the type member is a method)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedTypeMember">
      <summary>
            Related type member (property, method, etc.)
            </summary>
      <remarks>
            Use this property to store the name of a property of method of the related type that is related to 'this' type.
            </remarks>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedMemberParameter">
      <summary>
            Related type member parameter (if the related type member is a method)
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedMemberDescription">
      <summary>
            Related member description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedMemberParamDescription">
      <summary>
            Related member parameter description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelation.RelatedMemberParameterType">
      <summary>
            Type of the related member parameter (if the related member is a method)
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.TypeRelationList">
      <summary>
            Seto of all found relations for a given type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.Kind">
      <summary>
            Type kind
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.ThisTypeName">
      <summary>
            Type name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.ThisTypeProjectName">
      <summary>
            Prject containing the type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.ThisTypeFileName">
      <summary>
            Type declaration file name
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.Description">
      <summary>
            Type description
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.Remarks">
      <summary>
            Extra information about the type
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.TypeRelationList.Relations">
      <summary>
            Collection of type relations
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.XmlComment">
      <summary>
            Class to store XML comments 
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.XmlComment.Tag">
      <summary>
            Tag name (summary, for instance).
            </summary>
    </member>
    <member name="P:AIAssistants.JSON.XmlComment.Content">
      <summary>
            Tag content
            </summary>
    </member>
    <member name="T:AIAssistants.JSON.RelationsToQAConverter">
      <summary>
            Converter to transform a collection of type relation files into a single list of questions and answers.
            </summary>
    </member>
    <member name="M:AIAssistants.JSON.RelationsToQAConverter.CovertToStchemaBlock(System.String,System.Collections.Generic.List{System.String})">
      <summary>
            ISchemaBlockConverter: Converts a list of files with a given format into a single file with a different format.
            </summary>
      <param name="filename">
            Resulting file name.
            </param>
      <param name="items">
            List of files to integrate. All of them must have a format matching with TypeRelationList.
            </param>
    </member>
    <member name="T:AIAssistants.Tools.AudioManager">
      <summary>
            Default audio manager to record or generate speech
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.AudioManager.Recording">
      <summary>
            Recording audio status
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.AudioManager.CancelPlayback">
      <summary>
            Set to true to cancel the playback
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.AudioManager.StopBySilence">
      <summary>
            Set to true to stop recording by silence
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.AudioManager.SilenceThreshold">
      <summary>
            Silence threshold
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.AudioManager.SilenceDurationLimitMs">
      <summary>
            Silence duration limit in milliseconds
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.AudioManager.MaxFileSize">
      <summary>
            Maximum recording file size in MB
            </summary>
    </member>
    <member name="E:AIAssistants.Tools.AudioManager.AudioDataAvailable">
      <summary>
            Event to notify that audio data is available
            </summary>
    </member>
    <member name="M:AIAssistants.Tools.AudioManager.PlayMp3FromBytes(System.Byte[],System.Threading.CancellationToken)">
      <summary>
            Play an MP3 audio file from a byte array
            </summary>
      <param name="audioBytes">
            Byte array containing the audio data
            </param>
    </member>
    <member name="M:AIAssistants.Tools.AudioManager.RecordAudioAsync">
      <summary>
            Record audio from the microphone
            </summary>
      <returns>
            Buffer containing the recorded audio data
            </returns>
    </member>
    <member name="M:AIAssistants.Tools.AudioManager.StartRecording">
      <summary>
            Begin recording audio from the microphone
            </summary>
    </member>
    <member name="M:AIAssistants.Tools.AudioManager.StopRecording">
      <summary>
            Stop recording audio from the microphone
            </summary>
    </member>
    <member name="M:AIAssistants.Tools.AudioManager.GetAudioBytes">
      <summary>
            Get final audio bytes
            </summary>
      <returns>
            Recorded audio bytes
            </returns>
    </member>
    <member name="T:AIAssistants.Tools.BaseAppService">
      <summary>
            Gneric service to provide a base class for application services 
            </summary>
      <example>
            You can provide a function to stop endless irrelevant response loops in a chat.
            AI Players can use this function to tell the application to pass the speaking turn to the user instead of another AI participant
            </example>
      <seealso cref="T:AIAssistants.Interfaces.IAppAutomation" />
      <seealso cref="T:AIAssistants.Interfaces.IApplicationService" />
    </member>
    <member name="M:AIAssistants.Tools.BaseAppService.#ctor(AIAssistants.Interfaces.IAppAutomation,System.String,System.String,System.Collections.Generic.List{AIAssistants.JSON.FunctionDef},System.String)">
      <summary>
            Use this constructor to initialize all properties of the service
            </summary>
      <param name="appAutomation">
            Service owner
            </param>
      <param name="identifier">
            Service unique identifier
            </param>
      <param name="appPrompt">
            System prompt to tell assistants how to interact with the service
            </param>
      <param name="serviceFunctions">
            List of service functions
            </param>
      <param name="prefix">
            Prefix used to discrimate functions from the function list
            </param>
    </member>
    <member name="P:AIAssistants.Tools.BaseAppService.Identifier">
      <summary>
            IApplicationService: Service unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.BaseAppService.AppAutomation">
      <summary>
            IApplicationService: Service owner
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.BaseAppService.AppPrompt">
      <summary>
            IApplicationService: Prompt to tell assistants how to interact with the service
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.BaseAppService.ServiceFunctions">
      <summary>
            IApplicationService: List of functions available for the service
            </summary>
    </member>
    <member name="M:AIAssistants.Tools.BaseAppService.AddFunctions(System.Collections.Generic.List{AIAssistants.JSON.FunctionDef},System.String)">
      <summary>
            Add a list of qualified functions to the service
            </summary>
      <param name="functions">
            Function list
            </param>
      <param name="prefix">
            Prefix to select the functions. If null use the service identifier as prefix
            </param>
    </member>
    <member name="T:AIAssistants.Tools.BaseConsoleService">
      <summary>
            Gneric base class for console extension services
            </summary>
      <seealso cref="T:AIAssistants.Tools.BaseAppService" />
      <seealso cref="T:AIAssistants.Interfaces.IConsoleService" />
    </member>
    <member name="M:AIAssistants.Tools.BaseConsoleService.#ctor(AIAssistants.Interfaces.IAppAutomation,System.String,System.String,System.Collections.Generic.List{AIAssistants.JSON.FunctionDef},System.String)">
      <summary>
            Use this constructor to initialize all properties of the service
            </summary>
      <param name="appAutomation">
            Service owner
            </param>
      <param name="identifier">
            Service unique identifier
            </param>
      <param name="appPrompt">
            System prompt to tell assistants how to interact with the service
            </param>
      <param name="serviceFunctions">
            List of service functions
            </param>
      <param name="prefix">
            Prefix used to discrimate functions from the function list
            </param>
    </member>
    <member name="P:AIAssistants.Tools.BaseConsoleService.Title">
      <summary>
            IConsoleService: Page title
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.BaseConsoleService.Description">
      <summary>
            IConsoleService: Page description
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.BaseConsoleService.ConsolePage">
      <summary>
            IConsoleService: Console page
            </summary>
    </member>
    <member name="T:AIAssistants.Tools.JSONtoRTFConverter">
      <summary>
            JSON code to RTF converter
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.JSONtoRTFConverter.TextLimits">
      <summary>
            IObjectToFormattedString: Text container size limits
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.JSONtoRTFConverter.BoldLines">
      <summary>
            IObjectToFormattedString: Bold Text lines count
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.JSONtoRTFConverter.CodeLines">
      <summary>
            IObjectToFormattedString: Lines of text detected as source code
            </summary>
    </member>
    <member name="M:AIAssistants.Tools.JSONtoRTFConverter.ConvertObjectToString(System.Object)">
      <summary>
            Convert plain text Json code to RTF format with color coding
            </summary>
      <param name="obj">
            Object with Json properties to color code
            </param>
      <returns>
            Json code in RTF format
            </returns>
    </member>
    <member name="T:AIAssistants.Tools.ServiceConfig">
      <summary>
            Service configuration serializable data
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.ServiceConfig.UID">
      <summary>
            Service unique identifier
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.ServiceConfig.AppPrompt">
      <summary>
            Prompt to tell assistants how to interact with the service
            </summary>
    </member>
    <member name="P:AIAssistants.Tools.ServiceConfig.ServiceFunctions">
      <summary>
            List of functions available for the service
            </summary>
    </member>
  </members>
</doc>